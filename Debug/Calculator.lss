
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002dcc  00002e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000025d  00800082  00800082  00002e82  2**0
                  ALLOC
  3 .stab         00002928  00000000  00000000  00002e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001002  00000000  00000000  000057ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009592  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a340  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a72d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aefb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3d       	cpi	r26, 0xDF	; 223
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 16 	call	0x2c90	; 0x2c90 <main>
      8a:	0c 94 e4 16 	jmp	0x2dc8	; 0x2dc8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Precedent>:
Stack s_num;
Stack_op s_op;


s32 Precedent(u8 op1,u8 op2)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
    if(op1 =='$') return 1;
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	84 32       	cpi	r24, 0x24	; 36
     b62:	49 f4       	brne	.+18     	; 0xb76 <Precedent+0x30>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	8d 83       	std	Y+5, r24	; 0x05
     b6e:	9e 83       	std	Y+6, r25	; 0x06
     b70:	af 83       	std	Y+7, r26	; 0x07
     b72:	b8 87       	std	Y+8, r27	; 0x08
     b74:	3b c0       	rjmp	.+118    	; 0xbec <Precedent+0xa6>
    if( (op1=='*') || (op1=='/') ) return (op2 != '$');
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	8a 32       	cpi	r24, 0x2A	; 42
     b7a:	19 f0       	breq	.+6      	; 0xb82 <Precedent+0x3c>
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	8f 32       	cpi	r24, 0x2F	; 47
     b80:	81 f4       	brne	.+32     	; 0xba2 <Precedent+0x5c>
     b82:	1d 82       	std	Y+5, r1	; 0x05
     b84:	1e 82       	std	Y+6, r1	; 0x06
     b86:	1f 82       	std	Y+7, r1	; 0x07
     b88:	18 86       	std	Y+8, r1	; 0x08
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	84 32       	cpi	r24, 0x24	; 36
     b8e:	71 f1       	breq	.+92     	; 0xbec <Precedent+0xa6>
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	8d 83       	std	Y+5, r24	; 0x05
     b9a:	9e 83       	std	Y+6, r25	; 0x06
     b9c:	af 83       	std	Y+7, r26	; 0x07
     b9e:	b8 87       	std	Y+8, r27	; 0x08
     ba0:	25 c0       	rjmp	.+74     	; 0xbec <Precedent+0xa6>
     if( (op1=='+') || (op1=='-') ) return ( (op2 != '$') && (op2 != '*') && (op2 != '/') );
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	8b 32       	cpi	r24, 0x2B	; 43
     ba6:	19 f0       	breq	.+6      	; 0xbae <Precedent+0x68>
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	8d 32       	cpi	r24, 0x2D	; 45
     bac:	d9 f4       	brne	.+54     	; 0xbe4 <Precedent+0x9e>
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	84 32       	cpi	r24, 0x24	; 36
     bb2:	59 f0       	breq	.+22     	; 0xbca <Precedent+0x84>
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	8a 32       	cpi	r24, 0x2A	; 42
     bb8:	41 f0       	breq	.+16     	; 0xbca <Precedent+0x84>
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	8f 32       	cpi	r24, 0x2F	; 47
     bbe:	29 f0       	breq	.+10     	; 0xbca <Precedent+0x84>
     bc0:	a1 e0       	ldi	r26, 0x01	; 1
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	bc 83       	std	Y+4, r27	; 0x04
     bc6:	ab 83       	std	Y+3, r26	; 0x03
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <Precedent+0x88>
     bca:	1c 82       	std	Y+4, r1	; 0x04
     bcc:	1b 82       	std	Y+3, r1	; 0x03
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	9c 81       	ldd	r25, Y+4	; 0x04
     bd2:	aa 27       	eor	r26, r26
     bd4:	97 fd       	sbrc	r25, 7
     bd6:	a0 95       	com	r26
     bd8:	ba 2f       	mov	r27, r26
     bda:	8d 83       	std	Y+5, r24	; 0x05
     bdc:	9e 83       	std	Y+6, r25	; 0x06
     bde:	af 83       	std	Y+7, r26	; 0x07
     be0:	b8 87       	std	Y+8, r27	; 0x08
     be2:	04 c0       	rjmp	.+8      	; 0xbec <Precedent+0xa6>
     return 0;
     be4:	1d 82       	std	Y+5, r1	; 0x05
     be6:	1e 82       	std	Y+6, r1	; 0x06
     be8:	1f 82       	std	Y+7, r1	; 0x07
     bea:	18 86       	std	Y+8, r1	; 0x08
     bec:	8d 81       	ldd	r24, Y+5	; 0x05
     bee:	9e 81       	ldd	r25, Y+6	; 0x06
     bf0:	af 81       	ldd	r26, Y+7	; 0x07
     bf2:	b8 85       	ldd	r27, Y+8	; 0x08
}
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	28 96       	adiw	r28, 0x08	; 8
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	f8 94       	cli
     bfe:	de bf       	out	0x3e, r29	; 62
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	cd bf       	out	0x3d, r28	; 61
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <IsDigit>:
s32 IsDigit(u8 c)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <IsDigit+0x6>
     c10:	0f 92       	push	r0
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	89 83       	std	Y+1, r24	; 0x01
    return (c>='0' && c<='9');
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	80 33       	cpi	r24, 0x30	; 48
     c1c:	40 f0       	brcs	.+16     	; 0xc2e <IsDigit+0x24>
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	8a 33       	cpi	r24, 0x3A	; 58
     c22:	28 f4       	brcc	.+10     	; 0xc2e <IsDigit+0x24>
     c24:	21 e0       	ldi	r18, 0x01	; 1
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	3b 83       	std	Y+3, r19	; 0x03
     c2a:	2a 83       	std	Y+2, r18	; 0x02
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <IsDigit+0x28>
     c2e:	1b 82       	std	Y+3, r1	; 0x03
     c30:	1a 82       	std	Y+2, r1	; 0x02
     c32:	2a 81       	ldd	r18, Y+2	; 0x02
     c34:	3b 81       	ldd	r19, Y+3	; 0x03
     c36:	c9 01       	movw	r24, r18
     c38:	aa 27       	eor	r26, r26
     c3a:	97 fd       	sbrc	r25, 7
     c3c:	a0 95       	com	r26
     c3e:	ba 2f       	mov	r27, r26
}
     c40:	bc 01       	movw	r22, r24
     c42:	cd 01       	movw	r24, r26
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <Oper>:


ES_t Oper(u8 c,s32 op1,s32 op2,s32 *res)
{
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	2e 97       	sbiw	r28, 0x0e	; 14
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	8a 83       	std	Y+2, r24	; 0x02
     c6e:	4b 83       	std	Y+3, r20	; 0x03
     c70:	5c 83       	std	Y+4, r21	; 0x04
     c72:	6d 83       	std	Y+5, r22	; 0x05
     c74:	7e 83       	std	Y+6, r23	; 0x06
     c76:	0f 83       	std	Y+7, r16	; 0x07
     c78:	18 87       	std	Y+8, r17	; 0x08
     c7a:	29 87       	std	Y+9, r18	; 0x09
     c7c:	3a 87       	std	Y+10, r19	; 0x0a
     c7e:	fc 86       	std	Y+12, r15	; 0x0c
     c80:	eb 86       	std	Y+11, r14	; 0x0b
	 ES_t Local_errorstate=ES_OK;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	89 83       	std	Y+1, r24	; 0x01

    switch(c){
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	e8 2e       	mov	r14, r24
     c8a:	ff 24       	eor	r15, r15
     c8c:	fe 86       	std	Y+14, r15	; 0x0e
     c8e:	ed 86       	std	Y+13, r14	; 0x0d
     c90:	0d 85       	ldd	r16, Y+13	; 0x0d
     c92:	1e 85       	ldd	r17, Y+14	; 0x0e
     c94:	0b 32       	cpi	r16, 0x2B	; 43
     c96:	11 05       	cpc	r17, r1
     c98:	b9 f0       	breq	.+46     	; 0xcc8 <Oper+0x78>
     c9a:	2d 85       	ldd	r18, Y+13	; 0x0d
     c9c:	3e 85       	ldd	r19, Y+14	; 0x0e
     c9e:	2c 32       	cpi	r18, 0x2C	; 44
     ca0:	31 05       	cpc	r19, r1
     ca2:	34 f4       	brge	.+12     	; 0xcb0 <Oper+0x60>
     ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca8:	8a 32       	cpi	r24, 0x2A	; 42
     caa:	91 05       	cpc	r25, r1
     cac:	b9 f1       	breq	.+110    	; 0xd1c <Oper+0xcc>
     cae:	69 c0       	rjmp	.+210    	; 0xd82 <Oper+0x132>
     cb0:	0d 85       	ldd	r16, Y+13	; 0x0d
     cb2:	1e 85       	ldd	r17, Y+14	; 0x0e
     cb4:	0d 32       	cpi	r16, 0x2D	; 45
     cb6:	11 05       	cpc	r17, r1
     cb8:	d1 f0       	breq	.+52     	; 0xcee <Oper+0x9e>
     cba:	2d 85       	ldd	r18, Y+13	; 0x0d
     cbc:	3e 85       	ldd	r19, Y+14	; 0x0e
     cbe:	2f 32       	cpi	r18, 0x2F	; 47
     cc0:	31 05       	cpc	r19, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <Oper+0x76>
     cc4:	40 c0       	rjmp	.+128    	; 0xd46 <Oper+0xf6>
     cc6:	5d c0       	rjmp	.+186    	; 0xd82 <Oper+0x132>
        case'+': *res=op1+op2;
     cc8:	2b 81       	ldd	r18, Y+3	; 0x03
     cca:	3c 81       	ldd	r19, Y+4	; 0x04
     ccc:	4d 81       	ldd	r20, Y+5	; 0x05
     cce:	5e 81       	ldd	r21, Y+6	; 0x06
     cd0:	8f 81       	ldd	r24, Y+7	; 0x07
     cd2:	98 85       	ldd	r25, Y+8	; 0x08
     cd4:	a9 85       	ldd	r26, Y+9	; 0x09
     cd6:	ba 85       	ldd	r27, Y+10	; 0x0a
     cd8:	82 0f       	add	r24, r18
     cda:	93 1f       	adc	r25, r19
     cdc:	a4 1f       	adc	r26, r20
     cde:	b5 1f       	adc	r27, r21
     ce0:	eb 85       	ldd	r30, Y+11	; 0x0b
     ce2:	fc 85       	ldd	r31, Y+12	; 0x0c
     ce4:	80 83       	st	Z, r24
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	a2 83       	std	Z+2, r26	; 0x02
     cea:	b3 83       	std	Z+3, r27	; 0x03
     cec:	4a c0       	rjmp	.+148    	; 0xd82 <Oper+0x132>
                 break;
        case'-': *res=op1-op2;
     cee:	2b 81       	ldd	r18, Y+3	; 0x03
     cf0:	3c 81       	ldd	r19, Y+4	; 0x04
     cf2:	4d 81       	ldd	r20, Y+5	; 0x05
     cf4:	5e 81       	ldd	r21, Y+6	; 0x06
     cf6:	8f 81       	ldd	r24, Y+7	; 0x07
     cf8:	98 85       	ldd	r25, Y+8	; 0x08
     cfa:	a9 85       	ldd	r26, Y+9	; 0x09
     cfc:	ba 85       	ldd	r27, Y+10	; 0x0a
     cfe:	79 01       	movw	r14, r18
     d00:	8a 01       	movw	r16, r20
     d02:	e8 1a       	sub	r14, r24
     d04:	f9 0a       	sbc	r15, r25
     d06:	0a 0b       	sbc	r16, r26
     d08:	1b 0b       	sbc	r17, r27
     d0a:	d8 01       	movw	r26, r16
     d0c:	c7 01       	movw	r24, r14
     d0e:	eb 85       	ldd	r30, Y+11	; 0x0b
     d10:	fc 85       	ldd	r31, Y+12	; 0x0c
     d12:	80 83       	st	Z, r24
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	a2 83       	std	Z+2, r26	; 0x02
     d18:	b3 83       	std	Z+3, r27	; 0x03
     d1a:	33 c0       	rjmp	.+102    	; 0xd82 <Oper+0x132>
                 break;
        case'*': *res=op1*op2;
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	ad 81       	ldd	r26, Y+5	; 0x05
     d22:	be 81       	ldd	r27, Y+6	; 0x06
     d24:	2f 81       	ldd	r18, Y+7	; 0x07
     d26:	38 85       	ldd	r19, Y+8	; 0x08
     d28:	49 85       	ldd	r20, Y+9	; 0x09
     d2a:	5a 85       	ldd	r21, Y+10	; 0x0a
     d2c:	bc 01       	movw	r22, r24
     d2e:	cd 01       	movw	r24, r26
     d30:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__mulsi3>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	eb 85       	ldd	r30, Y+11	; 0x0b
     d3a:	fc 85       	ldd	r31, Y+12	; 0x0c
     d3c:	80 83       	st	Z, r24
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	a2 83       	std	Z+2, r26	; 0x02
     d42:	b3 83       	std	Z+3, r27	; 0x03
     d44:	1e c0       	rjmp	.+60     	; 0xd82 <Oper+0x132>
                 break;
        case'/':
        	if(op2==0)
     d46:	8f 81       	ldd	r24, Y+7	; 0x07
     d48:	98 85       	ldd	r25, Y+8	; 0x08
     d4a:	a9 85       	ldd	r26, Y+9	; 0x09
     d4c:	ba 85       	ldd	r27, Y+10	; 0x0a
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	a1 05       	cpc	r26, r1
     d52:	b1 05       	cpc	r27, r1
     d54:	11 f4       	brne	.+4      	; 0xd5a <Oper+0x10a>
        		Local_errorstate=ES_NOK;
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <Oper+0x132>
        	else
        	*res=op1/op2;
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	ad 81       	ldd	r26, Y+5	; 0x05
     d60:	be 81       	ldd	r27, Y+6	; 0x06
     d62:	2f 81       	ldd	r18, Y+7	; 0x07
     d64:	38 85       	ldd	r19, Y+8	; 0x08
     d66:	49 85       	ldd	r20, Y+9	; 0x09
     d68:	5a 85       	ldd	r21, Y+10	; 0x0a
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divmodsi4>
     d72:	da 01       	movw	r26, r20
     d74:	c9 01       	movw	r24, r18
     d76:	eb 85       	ldd	r30, Y+11	; 0x0b
     d78:	fc 85       	ldd	r31, Y+12	; 0x0c
     d7a:	80 83       	st	Z, r24
     d7c:	91 83       	std	Z+1, r25	; 0x01
     d7e:	a2 83       	std	Z+2, r26	; 0x02
     d80:	b3 83       	std	Z+3, r27	; 0x03
                 break;
    }
    return Local_errorstate;
     d82:	89 81       	ldd	r24, Y+1	; 0x01


}
     d84:	2e 96       	adiw	r28, 0x0e	; 14
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	f8 94       	cli
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	0f be       	out	0x3f, r0	; 63
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	08 95       	ret

00000d9e <Calc_Init>:

void Calc_Init()
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	    DIO_enuInit();
     da6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_enuInit>
		LCD_enuInit();
     daa:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LCD_enuInit>
		Keypad_enuInit();
     dae:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <Keypad_enuInit>
		CreateStack(&s_num);
     db2:	8d e4       	ldi	r24, 0x4D	; 77
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 66 14 	call	0x28cc	; 0x28cc <CreateStack>
		CreateStack_op(&s_op);
     dba:	83 e8       	ldi	r24, 0x83	; 131
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <CreateStack_op>


}
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <Calc_Res>:
s32 Calc_Res()
{
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	a0 97       	sbiw	r28, 0x20	; 32
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
	s32 num=0,res;
     de4:	1c 82       	std	Y+4, r1	; 0x04
     de6:	1d 82       	std	Y+5, r1	; 0x05
     de8:	1e 82       	std	Y+6, r1	; 0x06
     dea:	1f 82       	std	Y+7, r1	; 0x07
	u8 Symbol;
	ES_t Check_div;

	     for(u8 i=0;Exper[i] !='\0';i++)
     dec:	1a 82       	std	Y+2, r1	; 0x02
     dee:	b5 c0       	rjmp	.+362    	; 0xf5a <Calc_Res+0x192>
	     {

	         if(IsDigit(Exper[i]))
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	e7 51       	subi	r30, 0x17	; 23
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	0e 94 05 06 	call	0xc0a	; 0xc0a <IsDigit>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	a1 05       	cpc	r26, r1
     e0a:	b1 05       	cpc	r27, r1
     e0c:	29 f1       	breq	.+74     	; 0xe58 <Calc_Res+0x90>
	         {

	             num=num*10+(Exper[i]-'0');
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	9d 81       	ldd	r25, Y+5	; 0x05
     e12:	ae 81       	ldd	r26, Y+6	; 0x06
     e14:	bf 81       	ldd	r27, Y+7	; 0x07
     e16:	2a e0       	ldi	r18, 0x0A	; 10
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	50 e0       	ldi	r21, 0x00	; 0
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__mulsi3>
     e26:	9b 01       	movw	r18, r22
     e28:	ac 01       	movw	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	fc 01       	movw	r30, r24
     e32:	e7 51       	subi	r30, 0x17	; 23
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	c0 97       	sbiw	r24, 0x30	; 48
     e3e:	aa 27       	eor	r26, r26
     e40:	97 fd       	sbrc	r25, 7
     e42:	a0 95       	com	r26
     e44:	ba 2f       	mov	r27, r26
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	a4 1f       	adc	r26, r20
     e4c:	b5 1f       	adc	r27, r21
     e4e:	8c 83       	std	Y+4, r24	; 0x04
     e50:	9d 83       	std	Y+5, r25	; 0x05
     e52:	ae 83       	std	Y+6, r26	; 0x06
     e54:	bf 83       	std	Y+7, r27	; 0x07
     e56:	7e c0       	rjmp	.+252    	; 0xf54 <Calc_Res+0x18c>
	         }
	         else{

	                Push(num,&s_num);
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	ae 81       	ldd	r26, Y+6	; 0x06
     e5e:	bf 81       	ldd	r27, Y+7	; 0x07
     e60:	2d e4       	ldi	r18, 0x4D	; 77
     e62:	31 e0       	ldi	r19, 0x01	; 1
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	a9 01       	movw	r20, r18
     e6a:	0e 94 94 14 	call	0x2928	; 0x2928 <Push>
	                num=0;
     e6e:	1c 82       	std	Y+4, r1	; 0x04
     e70:	1d 82       	std	Y+5, r1	; 0x05
     e72:	1e 82       	std	Y+6, r1	; 0x06
     e74:	1f 82       	std	Y+7, r1	; 0x07

	            if( !StackEmpty_op(&s_op) )
     e76:	83 e8       	ldi	r24, 0x83	; 131
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <StackEmpty_op>
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	09 f0       	breq	.+2      	; 0xe84 <Calc_Res+0xbc>
     e82:	5c c0       	rjmp	.+184    	; 0xf3c <Calc_Res+0x174>
	            {
	                StackTop_op(&Symbol,&s_op);
     e84:	ce 01       	movw	r24, r28
     e86:	0c 96       	adiw	r24, 0x0c	; 12
     e88:	23 e8       	ldi	r18, 0x83	; 131
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	b9 01       	movw	r22, r18
     e8e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <StackTop_op>


	                if( Precedent(Symbol,Exper[i]) )
     e92:	2c 85       	ldd	r18, Y+12	; 0x0c
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	fc 01       	movw	r30, r24
     e9c:	e7 51       	subi	r30, 0x17	; 23
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	90 81       	ld	r25, Z
     ea2:	82 2f       	mov	r24, r18
     ea4:	69 2f       	mov	r22, r25
     ea6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Precedent>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	a1 05       	cpc	r26, r1
     eb2:	b1 05       	cpc	r27, r1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <Calc_Res+0xf0>
     eb6:	42 c0       	rjmp	.+132    	; 0xf3c <Calc_Res+0x174>
	                {
	                    s32 op1,op2;

	                    Pop(&op2,&s_num);
     eb8:	ce 01       	movw	r24, r28
     eba:	41 96       	adiw	r24, 0x11	; 17
     ebc:	2d e4       	ldi	r18, 0x4D	; 77
     ebe:	31 e0       	ldi	r19, 0x01	; 1
     ec0:	b9 01       	movw	r22, r18
     ec2:	0e 94 c9 14 	call	0x2992	; 0x2992 <Pop>

	                    Pop(&op1,&s_num);
     ec6:	ce 01       	movw	r24, r28
     ec8:	0d 96       	adiw	r24, 0x0d	; 13
     eca:	2d e4       	ldi	r18, 0x4D	; 77
     ecc:	31 e0       	ldi	r19, 0x01	; 1
     ece:	b9 01       	movw	r22, r18
     ed0:	0e 94 c9 14 	call	0x2992	; 0x2992 <Pop>



	                   ES_t Check_div= Oper(Symbol,op1,op2,&res);
     ed4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed6:	2d 85       	ldd	r18, Y+13	; 0x0d
     ed8:	3e 85       	ldd	r19, Y+14	; 0x0e
     eda:	4f 85       	ldd	r20, Y+15	; 0x0f
     edc:	58 89       	ldd	r21, Y+16	; 0x10
     ede:	e9 88       	ldd	r14, Y+17	; 0x11
     ee0:	fa 88       	ldd	r15, Y+18	; 0x12
     ee2:	0b 89       	ldd	r16, Y+19	; 0x13
     ee4:	1c 89       	ldd	r17, Y+20	; 0x14
     ee6:	fe 01       	movw	r30, r28
     ee8:	38 96       	adiw	r30, 0x08	; 8
     eea:	ba 01       	movw	r22, r20
     eec:	a9 01       	movw	r20, r18
     eee:	98 01       	movw	r18, r16
     ef0:	87 01       	movw	r16, r14
     ef2:	7f 01       	movw	r14, r30
     ef4:	0e 94 28 06 	call	0xc50	; 0xc50 <Oper>
     ef8:	89 83       	std	Y+1, r24	; 0x01

	                    if( Check_div==ES_NOK)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	88 23       	and	r24, r24
     efe:	61 f4       	brne	.+24     	; 0xf18 <Calc_Res+0x150>
	                    {
	                    	 LCD_enuSendCommand(0xc0);
     f00:	80 ec       	ldi	r24, 0xC0	; 192
     f02:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_enuSendCommand>
	                    	LCD_enuDisplayString(Error_Message);
     f06:	88 e6       	ldi	r24, 0x68	; 104
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 35 14 	call	0x286a	; 0x286a <LCD_enuDisplayString>
	                    	return 0;
     f0e:	1d 8e       	std	Y+29, r1	; 0x1d
     f10:	1e 8e       	std	Y+30, r1	; 0x1e
     f12:	1f 8e       	std	Y+31, r1	; 0x1f
     f14:	18 a2       	std	Y+32, r1	; 0x20
     f16:	96 c0       	rjmp	.+300    	; 0x1044 <Calc_Res+0x27c>
	                    }
	                    Push(res,&s_num);
     f18:	88 85       	ldd	r24, Y+8	; 0x08
     f1a:	99 85       	ldd	r25, Y+9	; 0x09
     f1c:	aa 85       	ldd	r26, Y+10	; 0x0a
     f1e:	bb 85       	ldd	r27, Y+11	; 0x0b
     f20:	2d e4       	ldi	r18, 0x4D	; 77
     f22:	31 e0       	ldi	r19, 0x01	; 1
     f24:	bc 01       	movw	r22, r24
     f26:	cd 01       	movw	r24, r26
     f28:	a9 01       	movw	r20, r18
     f2a:	0e 94 94 14 	call	0x2928	; 0x2928 <Push>
	                   Pop_op(&Symbol,&s_op);
     f2e:	ce 01       	movw	r24, r28
     f30:	0c 96       	adiw	r24, 0x0c	; 12
     f32:	23 e8       	ldi	r18, 0x83	; 131
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	b9 01       	movw	r22, r18
     f38:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <Pop_op>

	                }
	            }

	            Push_op(Exper[i],&s_op);
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	fc 01       	movw	r30, r24
     f44:	e7 51       	subi	r30, 0x17	; 23
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	80 81       	ld	r24, Z
     f4a:	23 e8       	ldi	r18, 0x83	; 131
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	b9 01       	movw	r22, r18
     f50:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <Push_op>
{
	s32 num=0,res;
	u8 Symbol;
	ES_t Check_div;

	     for(u8 i=0;Exper[i] !='\0';i++)
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	8f 5f       	subi	r24, 0xFF	; 255
     f58:	8a 83       	std	Y+2, r24	; 0x02
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	fc 01       	movw	r30, r24
     f62:	e7 51       	subi	r30, 0x17	; 23
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 81       	ld	r24, Z
     f68:	88 23       	and	r24, r24
     f6a:	09 f0       	breq	.+2      	; 0xf6e <Calc_Res+0x1a6>
     f6c:	41 cf       	rjmp	.-382    	; 0xdf0 <Calc_Res+0x28>
	         }


	     }

	     Push(num,&s_num);
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	ae 81       	ldd	r26, Y+6	; 0x06
     f74:	bf 81       	ldd	r27, Y+7	; 0x07
     f76:	2d e4       	ldi	r18, 0x4D	; 77
     f78:	31 e0       	ldi	r19, 0x01	; 1
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	a9 01       	movw	r20, r18
     f80:	0e 94 94 14 	call	0x2928	; 0x2928 <Push>
     f84:	42 c0       	rjmp	.+132    	; 0x100a <Calc_Res+0x242>

	     while(!StackEmpty_op(&s_op) )
	     {
	         Pop_op(&Symbol,&s_op);
     f86:	ce 01       	movw	r24, r28
     f88:	0c 96       	adiw	r24, 0x0c	; 12
     f8a:	23 e8       	ldi	r18, 0x83	; 131
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	b9 01       	movw	r22, r18
     f90:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <Pop_op>

	         s32 op1,op2;

             Pop(&op2,&s_num);
     f94:	ce 01       	movw	r24, r28
     f96:	49 96       	adiw	r24, 0x19	; 25
     f98:	2d e4       	ldi	r18, 0x4D	; 77
     f9a:	31 e0       	ldi	r19, 0x01	; 1
     f9c:	b9 01       	movw	r22, r18
     f9e:	0e 94 c9 14 	call	0x2992	; 0x2992 <Pop>
	         Pop(&op1,&s_num );
     fa2:	ce 01       	movw	r24, r28
     fa4:	45 96       	adiw	r24, 0x15	; 21
     fa6:	2d e4       	ldi	r18, 0x4D	; 77
     fa8:	31 e0       	ldi	r19, 0x01	; 1
     faa:	b9 01       	movw	r22, r18
     fac:	0e 94 c9 14 	call	0x2992	; 0x2992 <Pop>

	          Check_div=Oper(Symbol,op1,op2,&res);
     fb0:	8c 85       	ldd	r24, Y+12	; 0x0c
     fb2:	2d 89       	ldd	r18, Y+21	; 0x15
     fb4:	3e 89       	ldd	r19, Y+22	; 0x16
     fb6:	4f 89       	ldd	r20, Y+23	; 0x17
     fb8:	58 8d       	ldd	r21, Y+24	; 0x18
     fba:	e9 8c       	ldd	r14, Y+25	; 0x19
     fbc:	fa 8c       	ldd	r15, Y+26	; 0x1a
     fbe:	0b 8d       	ldd	r16, Y+27	; 0x1b
     fc0:	1c 8d       	ldd	r17, Y+28	; 0x1c
     fc2:	fe 01       	movw	r30, r28
     fc4:	38 96       	adiw	r30, 0x08	; 8
     fc6:	ba 01       	movw	r22, r20
     fc8:	a9 01       	movw	r20, r18
     fca:	98 01       	movw	r18, r16
     fcc:	87 01       	movw	r16, r14
     fce:	7f 01       	movw	r14, r30
     fd0:	0e 94 28 06 	call	0xc50	; 0xc50 <Oper>
     fd4:	8b 83       	std	Y+3, r24	; 0x03
	          if( Check_div==ES_NOK)
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	88 23       	and	r24, r24
     fda:	61 f4       	brne	.+24     	; 0xff4 <Calc_Res+0x22c>
	         	    {
	         	       LCD_enuSendCommand(0xc0);
     fdc:	80 ec       	ldi	r24, 0xC0	; 192
     fde:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_enuSendCommand>
	                   LCD_enuDisplayString(Error_Message);
     fe2:	88 e6       	ldi	r24, 0x68	; 104
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 35 14 	call	0x286a	; 0x286a <LCD_enuDisplayString>
	                   return 0;
     fea:	1d 8e       	std	Y+29, r1	; 0x1d
     fec:	1e 8e       	std	Y+30, r1	; 0x1e
     fee:	1f 8e       	std	Y+31, r1	; 0x1f
     ff0:	18 a2       	std	Y+32, r1	; 0x20
     ff2:	28 c0       	rjmp	.+80     	; 0x1044 <Calc_Res+0x27c>
	                   }
	          Push(res,&s_num );
     ff4:	88 85       	ldd	r24, Y+8	; 0x08
     ff6:	99 85       	ldd	r25, Y+9	; 0x09
     ff8:	aa 85       	ldd	r26, Y+10	; 0x0a
     ffa:	bb 85       	ldd	r27, Y+11	; 0x0b
     ffc:	2d e4       	ldi	r18, 0x4D	; 77
     ffe:	31 e0       	ldi	r19, 0x01	; 1
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	a9 01       	movw	r20, r18
    1006:	0e 94 94 14 	call	0x2928	; 0x2928 <Push>

	     }

	     Push(num,&s_num);

	     while(!StackEmpty_op(&s_op) )
    100a:	83 e8       	ldi	r24, 0x83	; 131
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <StackEmpty_op>
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	09 f4       	brne	.+2      	; 0x1018 <Calc_Res+0x250>
    1016:	b7 cf       	rjmp	.-146    	; 0xf86 <Calc_Res+0x1be>
	                   return 0;
	                   }
	          Push(res,&s_num );

	     }
	     StackTop(&res,&s_num );
    1018:	ce 01       	movw	r24, r28
    101a:	08 96       	adiw	r24, 0x08	; 8
    101c:	2d e4       	ldi	r18, 0x4D	; 77
    101e:	31 e0       	ldi	r19, 0x01	; 1
    1020:	b9 01       	movw	r22, r18
    1022:	0e 94 18 15 	call	0x2a30	; 0x2a30 <StackTop>
	    LCD_enuSendCommand(0xc0);
    1026:	80 ec       	ldi	r24, 0xC0	; 192
    1028:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_enuSendCommand>
	    LCD_enuDisplayIntegerNum(res);
    102c:	88 85       	ldd	r24, Y+8	; 0x08
    102e:	99 85       	ldd	r25, Y+9	; 0x09
    1030:	aa 85       	ldd	r26, Y+10	; 0x0a
    1032:	bb 85       	ldd	r27, Y+11	; 0x0b
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 20 11 	call	0x2240	; 0x2240 <LCD_enuDisplayIntegerNum>
	    return 0;
    103c:	1d 8e       	std	Y+29, r1	; 0x1d
    103e:	1e 8e       	std	Y+30, r1	; 0x1e
    1040:	1f 8e       	std	Y+31, r1	; 0x1f
    1042:	18 a2       	std	Y+32, r1	; 0x20
    1044:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1046:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1048:	af 8d       	ldd	r26, Y+31	; 0x1f
    104a:	b8 a1       	ldd	r27, Y+32	; 0x20





}
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	a0 96       	adiw	r28, 0x20	; 32
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	08 95       	ret

0000106a <Calulator_prog>:

void Calulator_prog()
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	0f 92       	push	r0
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Keyval;

		 do
		 {
			 Keypad_enuGetPressedKey(&Local_u8Keyval);
    1074:	ce 01       	movw	r24, r28
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <Keypad_enuGetPressedKey>

		 }while(Local_u8Keyval==0xff);
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	8f 3f       	cpi	r24, 0xFF	; 255
    1080:	c9 f3       	breq	.-14     	; 0x1074 <Calulator_prog+0xa>


			if(Local_u8Keyval == 'c')
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	83 36       	cpi	r24, 0x63	; 99
    1086:	81 f4       	brne	.+32     	; 0x10a8 <Calulator_prog+0x3e>
			{
				LCD_enuSendCommand(0x01);
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_enuSendCommand>
				i=0;
    108e:	10 92 82 00 	sts	0x0082, r1
				ClearStack(&s_num);
    1092:	8d e4       	ldi	r24, 0x4D	; 77
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <ClearStack>
				ClearStack_op(&s_op);
    109a:	83 e8       	ldi	r24, 0x83	; 131
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <ClearStack_op>
				Exper[0]='\0';
    10a2:	10 92 e9 00 	sts	0x00E9, r1
    10a6:	22 c0       	rjmp	.+68     	; 0x10ec <Calulator_prog+0x82>

			}
			else if(Local_u8Keyval == '=')
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	8d 33       	cpi	r24, 0x3D	; 61
    10ac:	79 f4       	brne	.+30     	; 0x10cc <Calulator_prog+0x62>
			{
				 Exper[i++]='\0';
    10ae:	20 91 82 00 	lds	r18, 0x0082
    10b2:	82 2f       	mov	r24, r18
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	fc 01       	movw	r30, r24
    10b8:	e7 51       	subi	r30, 0x17	; 23
    10ba:	ff 4f       	sbci	r31, 0xFF	; 255
    10bc:	10 82       	st	Z, r1
    10be:	82 2f       	mov	r24, r18
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	80 93 82 00 	sts	0x0082, r24


				 Calc_Res();
    10c6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <Calc_Res>
    10ca:	10 c0       	rjmp	.+32     	; 0x10ec <Calulator_prog+0x82>


			}
			else{
			LCD_enuDisplayChar(Local_u8Keyval);
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	0e 94 f6 10 	call	0x21ec	; 0x21ec <LCD_enuDisplayChar>
			Exper[i++] = Local_u8Keyval;
    10d2:	30 91 82 00 	lds	r19, 0x0082
    10d6:	83 2f       	mov	r24, r19
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	29 81       	ldd	r18, Y+1	; 0x01
    10dc:	fc 01       	movw	r30, r24
    10de:	e7 51       	subi	r30, 0x17	; 23
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	20 83       	st	Z, r18
    10e4:	83 2f       	mov	r24, r19
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 82 00 	sts	0x0082, r24
			}

}
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	0f 92       	push	r0
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    10fe:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1100:	ea e3       	ldi	r30, 0x3A	; 58
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1108:	e7 e3       	ldi	r30, 0x37	; 55
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	86 e9       	ldi	r24, 0x96	; 150
    1116:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1118:	e1 e3       	ldi	r30, 0x31	; 49
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	86 e9       	ldi	r24, 0x96	; 150
    111e:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1120:	eb e3       	ldi	r30, 0x3B	; 59
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    112a:	89 81       	ldd	r24, Y+1	; 0x01
}
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <DIO_enuSetPortDirection+0x6>
    113a:	00 d0       	rcall	.+0      	; 0x113c <DIO_enuSetPortDirection+0x8>
    113c:	0f 92       	push	r0
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	8a 83       	std	Y+2, r24	; 0x02
    1144:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1146:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	a8 f5       	brcc	.+106    	; 0x11b8 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3d 83       	std	Y+5, r19	; 0x05
    1156:	2c 83       	std	Y+4, r18	; 0x04
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <DIO_enuSetPortDirection+0x62>
    1162:	2c 81       	ldd	r18, Y+4	; 0x04
    1164:	3d 81       	ldd	r19, Y+5	; 0x05
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <DIO_enuSetPortDirection+0x42>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <DIO_enuSetPortDirection+0x58>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <DIO_enuSetPortDirection+0x7e>
    1176:	2c 81       	ldd	r18, Y+4	; 0x04
    1178:	3d 81       	ldd	r19, Y+5	; 0x05
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <DIO_enuSetPortDirection+0x6c>
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	9d 81       	ldd	r25, Y+5	; 0x05
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <DIO_enuSetPortDirection+0x76>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    118c:	ea e3       	ldi	r30, 0x3A	; 58
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	80 83       	st	Z, r24
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	80 83       	st	Z, r24
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    11a0:	e4 e3       	ldi	r30, 0x34	; 52
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	80 83       	st	Z, r24
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    11aa:	e1 e3       	ldi	r30, 0x31	; 49
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <DIO_enuSetPortValue+0x6>
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <DIO_enuSetPortValue+0x8>
    11d6:	0f 92       	push	r0
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	8a 83       	std	Y+2, r24	; 0x02
    11de:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    11e0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	84 30       	cpi	r24, 0x04	; 4
    11e6:	a8 f5       	brcc	.+106    	; 0x1252 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3d 83       	std	Y+5, r19	; 0x05
    11f0:	2c 83       	std	Y+4, r18	; 0x04
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	d1 f0       	breq	.+52     	; 0x1230 <DIO_enuSetPortValue+0x62>
    11fc:	2c 81       	ldd	r18, Y+4	; 0x04
    11fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	2c f4       	brge	.+10     	; 0x1210 <DIO_enuSetPortValue+0x42>
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	61 f0       	breq	.+24     	; 0x1226 <DIO_enuSetPortValue+0x58>
    120e:	1e c0       	rjmp	.+60     	; 0x124c <DIO_enuSetPortValue+0x7e>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	81 f0       	breq	.+32     	; 0x123a <DIO_enuSetPortValue+0x6c>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	83 30       	cpi	r24, 0x03	; 3
    1220:	91 05       	cpc	r25, r1
    1222:	81 f0       	breq	.+32     	; 0x1244 <DIO_enuSetPortValue+0x76>
    1224:	13 c0       	rjmp	.+38     	; 0x124c <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    1226:	eb e3       	ldi	r30, 0x3B	; 59
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	80 83       	st	Z, r24
    122e:	0e c0       	rjmp	.+28     	; 0x124c <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	80 83       	st	Z, r24
    1238:	09 c0       	rjmp	.+18     	; 0x124c <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    123a:	e5 e3       	ldi	r30, 0x35	; 53
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	80 83       	st	Z, r24
    1242:	04 c0       	rjmp	.+8      	; 0x124c <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    1244:	e2 e3       	ldi	r30, 0x32	; 50
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <DIO_enuTogPortValue+0x6>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <DIO_enuTogPortValue+0x8>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1276:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	08 f0       	brcs	.+2      	; 0x1280 <DIO_enuTogPortValue+0x18>
    127e:	41 c0       	rjmp	.+130    	; 0x1302 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3c 83       	std	Y+4, r19	; 0x04
    1288:	2b 83       	std	Y+3, r18	; 0x03
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	91 05       	cpc	r25, r1
    1292:	e9 f0       	breq	.+58     	; 0x12ce <DIO_enuTogPortValue+0x66>
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	3c 81       	ldd	r19, Y+4	; 0x04
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <DIO_enuTogPortValue+0x40>
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	61 f0       	breq	.+24     	; 0x12be <DIO_enuTogPortValue+0x56>
    12a6:	2a c0       	rjmp	.+84     	; 0x12fc <DIO_enuTogPortValue+0x94>
    12a8:	2b 81       	ldd	r18, Y+3	; 0x03
    12aa:	3c 81       	ldd	r19, Y+4	; 0x04
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	b1 f0       	breq	.+44     	; 0x12de <DIO_enuTogPortValue+0x76>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	91 05       	cpc	r25, r1
    12ba:	c9 f0       	breq	.+50     	; 0x12ee <DIO_enuTogPortValue+0x86>
    12bc:	1f c0       	rjmp	.+62     	; 0x12fc <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    12be:	ab e3       	ldi	r26, 0x3B	; 59
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	eb e3       	ldi	r30, 0x3B	; 59
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 95       	com	r24
    12ca:	8c 93       	st	X, r24
    12cc:	17 c0       	rjmp	.+46     	; 0x12fc <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    12ce:	a8 e3       	ldi	r26, 0x38	; 56
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e8 e3       	ldi	r30, 0x38	; 56
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 95       	com	r24
    12da:	8c 93       	st	X, r24
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    12de:	a5 e3       	ldi	r26, 0x35	; 53
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e3       	ldi	r30, 0x35	; 53
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 95       	com	r24
    12ea:	8c 93       	st	X, r24
    12ec:	07 c0       	rjmp	.+14     	; 0x12fc <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    12ee:	a2 e3       	ldi	r26, 0x32	; 50
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e2 e3       	ldi	r30, 0x32	; 50
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	80 95       	com	r24
    12fa:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1302:	83 e0       	ldi	r24, 0x03	; 3
    1304:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1306:	89 81       	ldd	r24, Y+1	; 0x01
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	08 95       	ret

00001316 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	00 d0       	rcall	.+0      	; 0x131c <DIO_enuGetPortValue+0x6>
    131c:	00 d0       	rcall	.+0      	; 0x131e <DIO_enuGetPortValue+0x8>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <DIO_enuGetPortValue+0xa>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	7c 83       	std	Y+4, r23	; 0x04
    1328:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    132a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	09 f4       	brne	.+2      	; 0x1336 <DIO_enuGetPortValue+0x20>
    1334:	43 c0       	rjmp	.+134    	; 0x13bc <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	e8 f5       	brcc	.+122    	; 0x13b6 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3e 83       	std	Y+6, r19	; 0x06
    1344:	2d 83       	std	Y+5, r18	; 0x05
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	e1 f0       	breq	.+56     	; 0x1388 <DIO_enuGetPortValue+0x72>
    1350:	2d 81       	ldd	r18, Y+5	; 0x05
    1352:	3e 81       	ldd	r19, Y+6	; 0x06
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	2c f4       	brge	.+10     	; 0x1364 <DIO_enuGetPortValue+0x4e>
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	61 f0       	breq	.+24     	; 0x137a <DIO_enuGetPortValue+0x64>
    1362:	26 c0       	rjmp	.+76     	; 0x13b0 <DIO_enuGetPortValue+0x9a>
    1364:	2d 81       	ldd	r18, Y+5	; 0x05
    1366:	3e 81       	ldd	r19, Y+6	; 0x06
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	a1 f0       	breq	.+40     	; 0x1396 <DIO_enuGetPortValue+0x80>
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	91 05       	cpc	r25, r1
    1376:	b1 f0       	breq	.+44     	; 0x13a4 <DIO_enuGetPortValue+0x8e>
    1378:	1b c0       	rjmp	.+54     	; 0x13b0 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    137a:	e9 e3       	ldi	r30, 0x39	; 57
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	eb 81       	ldd	r30, Y+3	; 0x03
    1382:	fc 81       	ldd	r31, Y+4	; 0x04
    1384:	80 83       	st	Z, r24
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1388:	e6 e3       	ldi	r30, 0x36	; 54
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	eb 81       	ldd	r30, Y+3	; 0x03
    1390:	fc 81       	ldd	r31, Y+4	; 0x04
    1392:	80 83       	st	Z, r24
    1394:	0d c0       	rjmp	.+26     	; 0x13b0 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    1396:	e3 e3       	ldi	r30, 0x33	; 51
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	eb 81       	ldd	r30, Y+3	; 0x03
    139e:	fc 81       	ldd	r31, Y+4	; 0x04
    13a0:	80 83       	st	Z, r24
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    13a4:	e0 e3       	ldi	r30, 0x30	; 48
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	eb 81       	ldd	r30, Y+3	; 0x03
    13ac:	fc 81       	ldd	r31, Y+4	; 0x04
    13ae:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	05 c0       	rjmp	.+10     	; 0x13c0 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c2:	26 96       	adiw	r28, 0x06	; 6
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <DIO_enuSetPinDirection+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <DIO_enuSetPinDirection+0x8>
    13dc:	00 d0       	rcall	.+0      	; 0x13de <DIO_enuSetPinDirection+0xa>
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	8a 83       	std	Y+2, r24	; 0x02
    13e4:	6b 83       	std	Y+3, r22	; 0x03
    13e6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    13e8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	84 30       	cpi	r24, 0x04	; 4
    13ee:	08 f0       	brcs	.+2      	; 0x13f2 <DIO_enuSetPinDirection+0x1e>
    13f0:	d1 c0       	rjmp	.+418    	; 0x1594 <DIO_enuSetPinDirection+0x1c0>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	88 30       	cpi	r24, 0x08	; 8
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <DIO_enuSetPinDirection+0x26>
    13f8:	cd c0       	rjmp	.+410    	; 0x1594 <DIO_enuSetPinDirection+0x1c0>
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <DIO_enuSetPinDirection+0x2e>
    1400:	c9 c0       	rjmp	.+402    	; 0x1594 <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	3e 83       	std	Y+6, r19	; 0x06
    140a:	2d 83       	std	Y+5, r18	; 0x05
    140c:	6d 81       	ldd	r22, Y+5	; 0x05
    140e:	7e 81       	ldd	r23, Y+6	; 0x06
    1410:	61 30       	cpi	r22, 0x01	; 1
    1412:	71 05       	cpc	r23, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <DIO_enuSetPinDirection+0x44>
    1416:	41 c0       	rjmp	.+130    	; 0x149a <DIO_enuSetPinDirection+0xc6>
    1418:	8d 81       	ldd	r24, Y+5	; 0x05
    141a:	9e 81       	ldd	r25, Y+6	; 0x06
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	91 05       	cpc	r25, r1
    1420:	34 f4       	brge	.+12     	; 0x142e <DIO_enuSetPinDirection+0x5a>
    1422:	2d 81       	ldd	r18, Y+5	; 0x05
    1424:	3e 81       	ldd	r19, Y+6	; 0x06
    1426:	21 15       	cp	r18, r1
    1428:	31 05       	cpc	r19, r1
    142a:	71 f0       	breq	.+28     	; 0x1448 <DIO_enuSetPinDirection+0x74>
    142c:	b0 c0       	rjmp	.+352    	; 0x158e <DIO_enuSetPinDirection+0x1ba>
    142e:	6d 81       	ldd	r22, Y+5	; 0x05
    1430:	7e 81       	ldd	r23, Y+6	; 0x06
    1432:	62 30       	cpi	r22, 0x02	; 2
    1434:	71 05       	cpc	r23, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <DIO_enuSetPinDirection+0x66>
    1438:	59 c0       	rjmp	.+178    	; 0x14ec <DIO_enuSetPinDirection+0x118>
    143a:	8d 81       	ldd	r24, Y+5	; 0x05
    143c:	9e 81       	ldd	r25, Y+6	; 0x06
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <DIO_enuSetPinDirection+0x72>
    1444:	7c c0       	rjmp	.+248    	; 0x153e <DIO_enuSetPinDirection+0x16a>
    1446:	a3 c0       	rjmp	.+326    	; 0x158e <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1448:	aa e3       	ldi	r26, 0x3A	; 58
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ea e3       	ldi	r30, 0x3A	; 58
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_enuSetPinDirection+0x90>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	2a 95       	dec	r18
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_enuSetPinDirection+0x8c>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    146e:	aa e3       	ldi	r26, 0x3A	; 58
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ea e3       	ldi	r30, 0x3A	; 58
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	b9 01       	movw	r22, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_enuSetPinDirection+0xba>
    148a:	66 0f       	add	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	8a 95       	dec	r24
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_enuSetPinDirection+0xb6>
    1492:	cb 01       	movw	r24, r22
    1494:	84 2b       	or	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	7a c0       	rjmp	.+244    	; 0x158e <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    149a:	a7 e3       	ldi	r26, 0x37	; 55
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e7 e3       	ldi	r30, 0x37	; 55
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_enuSetPinDirection+0xe2>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	2a 95       	dec	r18
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_enuSetPinDirection+0xde>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    14c0:	a7 e3       	ldi	r26, 0x37	; 55
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e7 e3       	ldi	r30, 0x37	; 55
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	b9 01       	movw	r22, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <DIO_enuSetPinDirection+0x10c>
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	8a 95       	dec	r24
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <DIO_enuSetPinDirection+0x108>
    14e4:	cb 01       	movw	r24, r22
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	51 c0       	rjmp	.+162    	; 0x158e <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    14ec:	a4 e3       	ldi	r26, 0x34	; 52
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e4 e3       	ldi	r30, 0x34	; 52
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_enuSetPinDirection+0x134>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	2a 95       	dec	r18
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_enuSetPinDirection+0x130>
    150c:	80 95       	com	r24
    150e:	84 23       	and	r24, r20
    1510:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    1512:	a4 e3       	ldi	r26, 0x34	; 52
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e4 e3       	ldi	r30, 0x34	; 52
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	b9 01       	movw	r22, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_enuSetPinDirection+0x15e>
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	8a 95       	dec	r24
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_enuSetPinDirection+0x15a>
    1536:	cb 01       	movw	r24, r22
    1538:	84 2b       	or	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	28 c0       	rjmp	.+80     	; 0x158e <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    153e:	a1 e3       	ldi	r26, 0x31	; 49
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e1 e3       	ldi	r30, 0x31	; 49
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 c0       	rjmp	.+4      	; 0x155a <DIO_enuSetPinDirection+0x186>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	2a 95       	dec	r18
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <DIO_enuSetPinDirection+0x182>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    1564:	a1 e3       	ldi	r26, 0x31	; 49
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e1 e3       	ldi	r30, 0x31	; 49
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	b9 01       	movw	r22, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_enuSetPinDirection+0x1b0>
    1580:	66 0f       	add	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_enuSetPinDirection+0x1ac>
    1588:	cb 01       	movw	r24, r22
    158a:	84 2b       	or	r24, r20
    158c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1598:	89 81       	ldd	r24, Y+1	; 0x01
}
    159a:	26 96       	adiw	r28, 0x06	; 6
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_enuSetPinValue+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <DIO_enuSetPinValue+0x8>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <DIO_enuSetPinValue+0xa>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	8a 83       	std	Y+2, r24	; 0x02
    15bc:	6b 83       	std	Y+3, r22	; 0x03
    15be:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    15c0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	84 30       	cpi	r24, 0x04	; 4
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <DIO_enuSetPinValue+0x1e>
    15c8:	d1 c0       	rjmp	.+418    	; 0x176c <DIO_enuSetPinValue+0x1c0>
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	88 30       	cpi	r24, 0x08	; 8
    15ce:	08 f0       	brcs	.+2      	; 0x15d2 <DIO_enuSetPinValue+0x26>
    15d0:	cd c0       	rjmp	.+410    	; 0x176c <DIO_enuSetPinValue+0x1c0>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	82 30       	cpi	r24, 0x02	; 2
    15d6:	08 f0       	brcs	.+2      	; 0x15da <DIO_enuSetPinValue+0x2e>
    15d8:	c9 c0       	rjmp	.+402    	; 0x176c <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3e 83       	std	Y+6, r19	; 0x06
    15e2:	2d 83       	std	Y+5, r18	; 0x05
    15e4:	6d 81       	ldd	r22, Y+5	; 0x05
    15e6:	7e 81       	ldd	r23, Y+6	; 0x06
    15e8:	61 30       	cpi	r22, 0x01	; 1
    15ea:	71 05       	cpc	r23, r1
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <DIO_enuSetPinValue+0x44>
    15ee:	41 c0       	rjmp	.+130    	; 0x1672 <DIO_enuSetPinValue+0xc6>
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	82 30       	cpi	r24, 0x02	; 2
    15f6:	91 05       	cpc	r25, r1
    15f8:	34 f4       	brge	.+12     	; 0x1606 <DIO_enuSetPinValue+0x5a>
    15fa:	2d 81       	ldd	r18, Y+5	; 0x05
    15fc:	3e 81       	ldd	r19, Y+6	; 0x06
    15fe:	21 15       	cp	r18, r1
    1600:	31 05       	cpc	r19, r1
    1602:	71 f0       	breq	.+28     	; 0x1620 <DIO_enuSetPinValue+0x74>
    1604:	b0 c0       	rjmp	.+352    	; 0x1766 <DIO_enuSetPinValue+0x1ba>
    1606:	6d 81       	ldd	r22, Y+5	; 0x05
    1608:	7e 81       	ldd	r23, Y+6	; 0x06
    160a:	62 30       	cpi	r22, 0x02	; 2
    160c:	71 05       	cpc	r23, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <DIO_enuSetPinValue+0x66>
    1610:	59 c0       	rjmp	.+178    	; 0x16c4 <DIO_enuSetPinValue+0x118>
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	9e 81       	ldd	r25, Y+6	; 0x06
    1616:	83 30       	cpi	r24, 0x03	; 3
    1618:	91 05       	cpc	r25, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <DIO_enuSetPinValue+0x72>
    161c:	7c c0       	rjmp	.+248    	; 0x1716 <DIO_enuSetPinValue+0x16a>
    161e:	a3 c0       	rjmp	.+326    	; 0x1766 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1620:	ab e3       	ldi	r26, 0x3B	; 59
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e3       	ldi	r30, 0x3B	; 59
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_enuSetPinValue+0x90>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	2a 95       	dec	r18
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_enuSetPinValue+0x8c>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1646:	ab e3       	ldi	r26, 0x3B	; 59
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	eb e3       	ldi	r30, 0x3B	; 59
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	b9 01       	movw	r22, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_enuSetPinValue+0xba>
    1662:	66 0f       	add	r22, r22
    1664:	77 1f       	adc	r23, r23
    1666:	8a 95       	dec	r24
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_enuSetPinValue+0xb6>
    166a:	cb 01       	movw	r24, r22
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	7a c0       	rjmp	.+244    	; 0x1766 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 c0       	rjmp	.+4      	; 0x168e <DIO_enuSetPinValue+0xe2>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	2a 95       	dec	r18
    1690:	e2 f7       	brpl	.-8      	; 0x168a <DIO_enuSetPinValue+0xde>
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    1698:	a8 e3       	ldi	r26, 0x38	; 56
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e8 e3       	ldi	r30, 0x38	; 56
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_enuSetPinValue+0x10c>
    16b4:	66 0f       	add	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	8a 95       	dec	r24
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_enuSetPinValue+0x108>
    16bc:	cb 01       	movw	r24, r22
    16be:	84 2b       	or	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	51 c0       	rjmp	.+162    	; 0x1766 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    16c4:	a5 e3       	ldi	r26, 0x35	; 53
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e5 e3       	ldi	r30, 0x35	; 53
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_enuSetPinValue+0x134>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	2a 95       	dec	r18
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_enuSetPinValue+0x130>
    16e4:	80 95       	com	r24
    16e6:	84 23       	and	r24, r20
    16e8:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    16ea:	a5 e3       	ldi	r26, 0x35	; 53
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e3       	ldi	r30, 0x35	; 53
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	b9 01       	movw	r22, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <DIO_enuSetPinValue+0x15e>
    1706:	66 0f       	add	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	8a 95       	dec	r24
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <DIO_enuSetPinValue+0x15a>
    170e:	cb 01       	movw	r24, r22
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	28 c0       	rjmp	.+80     	; 0x1766 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1716:	a2 e3       	ldi	r26, 0x32	; 50
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <DIO_enuSetPinValue+0x186>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	2a 95       	dec	r18
    1734:	e2 f7       	brpl	.-8      	; 0x172e <DIO_enuSetPinValue+0x182>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    173c:	a2 e3       	ldi	r26, 0x32	; 50
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e2 e3       	ldi	r30, 0x32	; 50
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	b9 01       	movw	r22, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_enuSetPinValue+0x1b0>
    1758:	66 0f       	add	r22, r22
    175a:	77 1f       	adc	r23, r23
    175c:	8a 95       	dec	r24
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_enuSetPinValue+0x1ac>
    1760:	cb 01       	movw	r24, r22
    1762:	84 2b       	or	r24, r20
    1764:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1770:	89 81       	ldd	r24, Y+1	; 0x01
}
    1772:	26 96       	adiw	r28, 0x06	; 6
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <DIO_enuTogPin+0x6>
    178a:	00 d0       	rcall	.+0      	; 0x178c <DIO_enuTogPin+0x8>
    178c:	0f 92       	push	r0
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	8a 83       	std	Y+2, r24	; 0x02
    1794:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1796:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	84 30       	cpi	r24, 0x04	; 4
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <DIO_enuTogPin+0x1c>
    179e:	75 c0       	rjmp	.+234    	; 0x188a <DIO_enuTogPin+0x106>
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	88 30       	cpi	r24, 0x08	; 8
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <DIO_enuTogPin+0x24>
    17a6:	71 c0       	rjmp	.+226    	; 0x188a <DIO_enuTogPin+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	3d 83       	std	Y+5, r19	; 0x05
    17b0:	2c 83       	std	Y+4, r18	; 0x04
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	81 30       	cpi	r24, 0x01	; 1
    17b8:	91 05       	cpc	r25, r1
    17ba:	49 f1       	breq	.+82     	; 0x180e <DIO_enuTogPin+0x8a>
    17bc:	2c 81       	ldd	r18, Y+4	; 0x04
    17be:	3d 81       	ldd	r19, Y+5	; 0x05
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <DIO_enuTogPin+0x4c>
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	61 f0       	breq	.+24     	; 0x17e6 <DIO_enuTogPin+0x62>
    17ce:	5a c0       	rjmp	.+180    	; 0x1884 <DIO_enuTogPin+0x100>
    17d0:	2c 81       	ldd	r18, Y+4	; 0x04
    17d2:	3d 81       	ldd	r19, Y+5	; 0x05
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	31 05       	cpc	r19, r1
    17d8:	71 f1       	breq	.+92     	; 0x1836 <DIO_enuTogPin+0xb2>
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	91 05       	cpc	r25, r1
    17e2:	e9 f1       	breq	.+122    	; 0x185e <DIO_enuTogPin+0xda>
    17e4:	4f c0       	rjmp	.+158    	; 0x1884 <DIO_enuTogPin+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    17e6:	ab e3       	ldi	r26, 0x3B	; 59
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	eb e3       	ldi	r30, 0x3B	; 59
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_enuTogPin+0x80>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_enuTogPin+0x7c>
    1808:	84 27       	eor	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	3b c0       	rjmp	.+118    	; 0x1884 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    180e:	a8 e3       	ldi	r26, 0x38	; 56
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e8 e3       	ldi	r30, 0x38	; 56
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_enuTogPin+0xa8>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_enuTogPin+0xa4>
    1830:	84 27       	eor	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	27 c0       	rjmp	.+78     	; 0x1884 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1836:	a5 e3       	ldi	r26, 0x35	; 53
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e3       	ldi	r30, 0x35	; 53
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_enuTogPin+0xd0>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_enuTogPin+0xcc>
    1858:	84 27       	eor	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	13 c0       	rjmp	.+38     	; 0x1884 <DIO_enuTogPin+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    185e:	a2 e3       	ldi	r26, 0x32	; 50
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	48 2f       	mov	r20, r24
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 2e       	mov	r0, r18
    1876:	02 c0       	rjmp	.+4      	; 0x187c <DIO_enuTogPin+0xf8>
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	0a 94       	dec	r0
    187e:	e2 f7       	brpl	.-8      	; 0x1878 <DIO_enuTogPin+0xf4>
    1880:	84 27       	eor	r24, r20
    1882:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	02 c0       	rjmp	.+4      	; 0x188e <DIO_enuTogPin+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	27 97       	sbiw	r28, 0x07	; 7
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	6b 83       	std	Y+3, r22	; 0x03
    18b8:	5d 83       	std	Y+5, r21	; 0x05
    18ba:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    18bc:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	9d 81       	ldd	r25, Y+5	; 0x05
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <DIO_enuGetPinValue+0x28>
    18c6:	7e c0       	rjmp	.+252    	; 0x19c4 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <DIO_enuGetPinValue+0x30>
    18ce:	77 c0       	rjmp	.+238    	; 0x19be <DIO_enuGetPinValue+0x11e>
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	88 30       	cpi	r24, 0x08	; 8
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <DIO_enuGetPinValue+0x38>
    18d6:	73 c0       	rjmp	.+230    	; 0x19be <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3f 83       	std	Y+7, r19	; 0x07
    18e0:	2e 83       	std	Y+6, r18	; 0x06
    18e2:	4e 81       	ldd	r20, Y+6	; 0x06
    18e4:	5f 81       	ldd	r21, Y+7	; 0x07
    18e6:	41 30       	cpi	r20, 0x01	; 1
    18e8:	51 05       	cpc	r21, r1
    18ea:	59 f1       	breq	.+86     	; 0x1942 <DIO_enuGetPinValue+0xa2>
    18ec:	8e 81       	ldd	r24, Y+6	; 0x06
    18ee:	9f 81       	ldd	r25, Y+7	; 0x07
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	91 05       	cpc	r25, r1
    18f4:	34 f4       	brge	.+12     	; 0x1902 <DIO_enuGetPinValue+0x62>
    18f6:	2e 81       	ldd	r18, Y+6	; 0x06
    18f8:	3f 81       	ldd	r19, Y+7	; 0x07
    18fa:	21 15       	cp	r18, r1
    18fc:	31 05       	cpc	r19, r1
    18fe:	69 f0       	breq	.+26     	; 0x191a <DIO_enuGetPinValue+0x7a>
    1900:	5b c0       	rjmp	.+182    	; 0x19b8 <DIO_enuGetPinValue+0x118>
    1902:	4e 81       	ldd	r20, Y+6	; 0x06
    1904:	5f 81       	ldd	r21, Y+7	; 0x07
    1906:	42 30       	cpi	r20, 0x02	; 2
    1908:	51 05       	cpc	r21, r1
    190a:	79 f1       	breq	.+94     	; 0x196a <DIO_enuGetPinValue+0xca>
    190c:	8e 81       	ldd	r24, Y+6	; 0x06
    190e:	9f 81       	ldd	r25, Y+7	; 0x07
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	91 05       	cpc	r25, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <DIO_enuGetPinValue+0x78>
    1916:	3d c0       	rjmp	.+122    	; 0x1992 <DIO_enuGetPinValue+0xf2>
    1918:	4f c0       	rjmp	.+158    	; 0x19b8 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    191a:	e9 e3       	ldi	r30, 0x39	; 57
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a9 01       	movw	r20, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <DIO_enuGetPinValue+0x92>
    192e:	55 95       	asr	r21
    1930:	47 95       	ror	r20
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <DIO_enuGetPinValue+0x8e>
    1936:	ca 01       	movw	r24, r20
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	ec 81       	ldd	r30, Y+4	; 0x04
    193c:	fd 81       	ldd	r31, Y+5	; 0x05
    193e:	80 83       	st	Z, r24
    1940:	3b c0       	rjmp	.+118    	; 0x19b8 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    1942:	e6 e3       	ldi	r30, 0x36	; 54
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a9 01       	movw	r20, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <DIO_enuGetPinValue+0xba>
    1956:	55 95       	asr	r21
    1958:	47 95       	ror	r20
    195a:	8a 95       	dec	r24
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <DIO_enuGetPinValue+0xb6>
    195e:	ca 01       	movw	r24, r20
    1960:	81 70       	andi	r24, 0x01	; 1
    1962:	ec 81       	ldd	r30, Y+4	; 0x04
    1964:	fd 81       	ldd	r31, Y+5	; 0x05
    1966:	80 83       	st	Z, r24
    1968:	27 c0       	rjmp	.+78     	; 0x19b8 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    196a:	e3 e3       	ldi	r30, 0x33	; 51
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_enuGetPinValue+0xe2>
    197e:	55 95       	asr	r21
    1980:	47 95       	ror	r20
    1982:	8a 95       	dec	r24
    1984:	e2 f7       	brpl	.-8      	; 0x197e <DIO_enuGetPinValue+0xde>
    1986:	ca 01       	movw	r24, r20
    1988:	81 70       	andi	r24, 0x01	; 1
    198a:	ec 81       	ldd	r30, Y+4	; 0x04
    198c:	fd 81       	ldd	r31, Y+5	; 0x05
    198e:	80 83       	st	Z, r24
    1990:	13 c0       	rjmp	.+38     	; 0x19b8 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    1992:	e0 e3       	ldi	r30, 0x30	; 48
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a9 01       	movw	r20, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_enuGetPinValue+0x10a>
    19a6:	55 95       	asr	r21
    19a8:	47 95       	ror	r20
    19aa:	8a 95       	dec	r24
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_enuGetPinValue+0x106>
    19ae:	ca 01       	movw	r24, r20
    19b0:	81 70       	andi	r24, 0x01	; 1
    19b2:	ec 81       	ldd	r30, Y+4	; 0x04
    19b4:	fd 81       	ldd	r31, Y+5	; 0x05
    19b6:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	05 c0       	rjmp	.+10     	; 0x19c8 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    19be:	83 e0       	ldi	r24, 0x03	; 3
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ca:	27 96       	adiw	r28, 0x07	; 7
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <Keypad_enuInit>:
#include "Keypad_priv.h"

#include <util/delay.h>

ES_t Keypad_enuInit(void)
{
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	0f 92       	push	r0
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    19e6:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection(C1_PORT,C1_PIN, DIO_u8OUTPUT);
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT,C2_PIN, DIO_u8OUTPUT);
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT,C3_PIN, DIO_u8OUTPUT);
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	62 e0       	ldi	r22, 0x02	; 2
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT,C4_PIN, DIO_u8OUTPUT);
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	63 e0       	ldi	r22, 0x03	; 3
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT,R1_PIN, DIO_u8INPUT);
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT,R2_PIN, DIO_u8INPUT);
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT,R3_PIN, DIO_u8INPUT);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT,R4_PIN, DIO_u8INPUT);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	63 e0       	ldi	r22, 0x03	; 3
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT,C1_PIN, DIO_u8HIGH);
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT,C2_PIN, DIO_u8HIGH);
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT,C3_PIN, DIO_u8HIGH);
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT,C4_PIN, DIO_u8HIGH);
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	63 e0       	ldi	r22, 0x03	; 3
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT,R1_PIN, DIO_u8PULL_UP);
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT,R2_PIN, DIO_u8PULL_UP);
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT,R3_PIN, DIO_u8PULL_UP);
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	62 e0       	ldi	r22, 0x02	; 2
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT,R4_PIN, DIO_u8PULL_UP);
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	63 e0       	ldi	r22, 0x03	; 3
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>

	Local_enuErrorState =ES_OK;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8e:	0f 90       	pop	r0
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	ea 97       	sbiw	r28, 0x3a	; 58
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	9c ab       	std	Y+52, r25	; 0x34
    1aac:	8b ab       	std	Y+51, r24	; 0x33
	ES_t Local_enuErrorState =ES_NOK;
    1aae:	19 8a       	std	Y+17, r1	; 0x11

	if (Copy_pu8KeyValue != NULL)
    1ab0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ab2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	09 f4       	brne	.+2      	; 0x1aba <Keypad_enuGetPressedKey+0x24>
    1ab8:	6b c1       	rjmp	.+726    	; 0x1d90 <Keypad_enuGetPressedKey+0x2fa>
	{
		u8 Local_Au8RowPins [ROWS_NUM] = { R1_PIN , R2_PIN , R3_PIN , R4_PIN };
    1aba:	1a 8a       	std	Y+18, r1	; 0x12
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	8c 8b       	std	Y+20, r24	; 0x14
    1ac4:	83 e0       	ldi	r24, 0x03	; 3
    1ac6:	8d 8b       	std	Y+21, r24	; 0x15
		u8 Local_Au8ColPins [COLS_NUM] = { C1_PIN , C2_PIN , C3_PIN , C4_PIN };
    1ac8:	1e 8a       	std	Y+22, r1	; 0x16
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	8f 8b       	std	Y+23, r24	; 0x17
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	88 8f       	std	Y+24, r24	; 0x18
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	89 8f       	std	Y+25, r24	; 0x19
		u8 Local_Au8RowPorts[ROWS_NUM] = { R1_PORT , R2_PORT , R3_PORT , R4_PORT };
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	8a 8f       	std	Y+26, r24	; 0x1a
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	8b 8f       	std	Y+27, r24	; 0x1b
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	8c 8f       	std	Y+28, r24	; 0x1c
    1ae2:	82 e0       	ldi	r24, 0x02	; 2
    1ae4:	8d 8f       	std	Y+29, r24	; 0x1d
		u8 Local_Au8ColPorts[COLS_NUM] = { C1_PORT , C2_PORT , C3_PORT , C4_PORT };
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	8e 8f       	std	Y+30, r24	; 0x1e
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	8f 8f       	std	Y+31, r24	; 0x1f
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	88 a3       	std	Y+32, r24	; 0x20
    1af2:	83 e0       	ldi	r24, 0x03	; 3
    1af4:	89 a3       	std	Y+33, r24	; 0x21

		*Copy_pu8KeyValue = KEY_NOT_PRESS;
    1af6:	eb a9       	ldd	r30, Y+51	; 0x33
    1af8:	fc a9       	ldd	r31, Y+52	; 0x34
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	80 83       	st	Z, r24

		u8 Local_Au8KeyValues[ROWS_NUM][COLS_NUM] = KEYS_VALUES;
    1afe:	ce 01       	movw	r24, r28
    1b00:	82 96       	adiw	r24, 0x22	; 34
    1b02:	9f ab       	std	Y+55, r25	; 0x37
    1b04:	8e ab       	std	Y+54, r24	; 0x36
    1b06:	e2 e7       	ldi	r30, 0x72	; 114
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	f9 af       	std	Y+57, r31	; 0x39
    1b0c:	e8 af       	std	Y+56, r30	; 0x38
    1b0e:	f0 e1       	ldi	r31, 0x10	; 16
    1b10:	fa af       	std	Y+58, r31	; 0x3a
    1b12:	e8 ad       	ldd	r30, Y+56	; 0x38
    1b14:	f9 ad       	ldd	r31, Y+57	; 0x39
    1b16:	00 80       	ld	r0, Z
    1b18:	88 ad       	ldd	r24, Y+56	; 0x38
    1b1a:	99 ad       	ldd	r25, Y+57	; 0x39
    1b1c:	01 96       	adiw	r24, 0x01	; 1
    1b1e:	99 af       	std	Y+57, r25	; 0x39
    1b20:	88 af       	std	Y+56, r24	; 0x38
    1b22:	ee a9       	ldd	r30, Y+54	; 0x36
    1b24:	ff a9       	ldd	r31, Y+55	; 0x37
    1b26:	00 82       	st	Z, r0
    1b28:	8e a9       	ldd	r24, Y+54	; 0x36
    1b2a:	9f a9       	ldd	r25, Y+55	; 0x37
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	9f ab       	std	Y+55, r25	; 0x37
    1b30:	8e ab       	std	Y+54, r24	; 0x36
    1b32:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b34:	91 50       	subi	r25, 0x01	; 1
    1b36:	9a af       	std	Y+58, r25	; 0x3a
    1b38:	ea ad       	ldd	r30, Y+58	; 0x3a
    1b3a:	ee 23       	and	r30, r30
    1b3c:	51 f7       	brne	.-44     	; 0x1b12 <Keypad_enuGetPressedKey+0x7c>

		u8 Local_u8PinValue = 0xff;
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	8a ab       	std	Y+50, r24	; 0x32

		u8 Local_u8RowIter , Local_u8ColIter;

		for (Local_u8ColIter =0; Local_u8ColIter < COLS_NUM ; Local_u8ColIter ++)
    1b42:	1f 86       	std	Y+15, r1	; 0x0f
    1b44:	20 c1       	rjmp	.+576    	; 0x1d86 <Keypad_enuGetPressedKey+0x2f0>
		{
			DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter] , Local_Au8ColPins[Local_u8ColIter] , DIO_u8LOW);
    1b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	4e 96       	adiw	r24, 0x1e	; 30
    1b50:	fc 01       	movw	r30, r24
    1b52:	e2 0f       	add	r30, r18
    1b54:	f3 1f       	adc	r31, r19
    1b56:	40 81       	ld	r20, Z
    1b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	ce 01       	movw	r24, r28
    1b60:	46 96       	adiw	r24, 0x16	; 22
    1b62:	fc 01       	movw	r30, r24
    1b64:	e2 0f       	add	r30, r18
    1b66:	f3 1f       	adc	r31, r19
    1b68:	90 81       	ld	r25, Z
    1b6a:	84 2f       	mov	r24, r20
    1b6c:	69 2f       	mov	r22, r25
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>

			for (Local_u8RowIter =0 ; Local_u8RowIter <ROWS_NUM ; Local_u8RowIter ++)
    1b74:	18 8a       	std	Y+16, r1	; 0x10
    1b76:	e9 c0       	rjmp	.+466    	; 0x1d4a <Keypad_enuGetPressedKey+0x2b4>
			{
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1b78:	88 89       	ldd	r24, Y+16	; 0x10
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	ce 01       	movw	r24, r28
    1b80:	4a 96       	adiw	r24, 0x1a	; 26
    1b82:	fc 01       	movw	r30, r24
    1b84:	e2 0f       	add	r30, r18
    1b86:	f3 1f       	adc	r31, r19
    1b88:	40 81       	ld	r20, Z
    1b8a:	88 89       	ldd	r24, Y+16	; 0x10
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	ce 01       	movw	r24, r28
    1b92:	42 96       	adiw	r24, 0x12	; 18
    1b94:	fc 01       	movw	r30, r24
    1b96:	e2 0f       	add	r30, r18
    1b98:	f3 1f       	adc	r31, r19
    1b9a:	90 81       	ld	r25, Z
    1b9c:	9e 01       	movw	r18, r28
    1b9e:	2e 5c       	subi	r18, 0xCE	; 206
    1ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba2:	84 2f       	mov	r24, r20
    1ba4:	69 2f       	mov	r22, r25
    1ba6:	a9 01       	movw	r20, r18
    1ba8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    1bac:	8a a9       	ldd	r24, Y+50	; 0x32
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <Keypad_enuGetPressedKey+0x11e>
    1bb2:	c8 c0       	rjmp	.+400    	; 0x1d44 <Keypad_enuGetPressedKey+0x2ae>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a0 e2       	ldi	r26, 0x20	; 32
    1bba:	b1 e4       	ldi	r27, 0x41	; 65
    1bbc:	8b 87       	std	Y+11, r24	; 0x0b
    1bbe:	9c 87       	std	Y+12, r25	; 0x0c
    1bc0:	ad 87       	std	Y+13, r26	; 0x0d
    1bc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	4a e7       	ldi	r20, 0x7A	; 122
    1bd2:	53 e4       	ldi	r21, 0x43	; 67
    1bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	8f 83       	std	Y+7, r24	; 0x07
    1bde:	98 87       	std	Y+8, r25	; 0x08
    1be0:	a9 87       	std	Y+9, r26	; 0x09
    1be2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be4:	6f 81       	ldd	r22, Y+7	; 0x07
    1be6:	78 85       	ldd	r23, Y+8	; 0x08
    1be8:	89 85       	ldd	r24, Y+9	; 0x09
    1bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	2c f4       	brge	.+10     	; 0x1c06 <Keypad_enuGetPressedKey+0x170>
		__ticks = 1;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9e 83       	std	Y+6, r25	; 0x06
    1c02:	8d 83       	std	Y+5, r24	; 0x05
    1c04:	3f c0       	rjmp	.+126    	; 0x1c84 <Keypad_enuGetPressedKey+0x1ee>
	else if (__tmp > 65535)
    1c06:	6f 81       	ldd	r22, Y+7	; 0x07
    1c08:	78 85       	ldd	r23, Y+8	; 0x08
    1c0a:	89 85       	ldd	r24, Y+9	; 0x09
    1c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	3f ef       	ldi	r19, 0xFF	; 255
    1c12:	4f e7       	ldi	r20, 0x7F	; 127
    1c14:	57 e4       	ldi	r21, 0x47	; 71
    1c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1a:	18 16       	cp	r1, r24
    1c1c:	4c f5       	brge	.+82     	; 0x1c70 <Keypad_enuGetPressedKey+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <Keypad_enuGetPressedKey+0x1d0>
    1c48:	89 e1       	ldi	r24, 0x19	; 25
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9c 83       	std	Y+4, r25	; 0x04
    1c4e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <Keypad_enuGetPressedKey+0x1be>
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	69 f7       	brne	.-38     	; 0x1c48 <Keypad_enuGetPressedKey+0x1b2>
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <Keypad_enuGetPressedKey+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c70:	6f 81       	ldd	r22, Y+7	; 0x07
    1c72:	78 85       	ldd	r23, Y+8	; 0x08
    1c74:	89 85       	ldd	r24, Y+9	; 0x09
    1c76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	01 97       	sbiw	r24, 0x01	; 1
    1c92:	f1 f7       	brne	.-4      	; 0x1c90 <Keypad_enuGetPressedKey+0x1fa>
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(10);
					DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1c98:	88 89       	ldd	r24, Y+16	; 0x10
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	4a 96       	adiw	r24, 0x1a	; 26
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	e2 0f       	add	r30, r18
    1ca6:	f3 1f       	adc	r31, r19
    1ca8:	40 81       	ld	r20, Z
    1caa:	88 89       	ldd	r24, Y+16	; 0x10
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	42 96       	adiw	r24, 0x12	; 18
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	e2 0f       	add	r30, r18
    1cb8:	f3 1f       	adc	r31, r19
    1cba:	90 81       	ld	r25, Z
    1cbc:	9e 01       	movw	r18, r28
    1cbe:	2e 5c       	subi	r18, 0xCE	; 206
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	84 2f       	mov	r24, r20
    1cc4:	69 2f       	mov	r22, r25
    1cc6:	a9 01       	movw	r20, r18
    1cc8:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <DIO_enuGetPinValue>
					if (! Local_u8PinValue)
    1ccc:	8a a9       	ldd	r24, Y+50	; 0x32
    1cce:	88 23       	and	r24, r24
    1cd0:	c9 f5       	brne	.+114    	; 0x1d44 <Keypad_enuGetPressedKey+0x2ae>
    1cd2:	1a c0       	rjmp	.+52     	; 0x1d08 <Keypad_enuGetPressedKey+0x272>
					{
						while (! Local_u8PinValue)
						{
							DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1cd4:	88 89       	ldd	r24, Y+16	; 0x10
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	ce 01       	movw	r24, r28
    1cdc:	4a 96       	adiw	r24, 0x1a	; 26
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e2 0f       	add	r30, r18
    1ce2:	f3 1f       	adc	r31, r19
    1ce4:	40 81       	ld	r20, Z
    1ce6:	88 89       	ldd	r24, Y+16	; 0x10
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	ce 01       	movw	r24, r28
    1cee:	42 96       	adiw	r24, 0x12	; 18
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	e2 0f       	add	r30, r18
    1cf4:	f3 1f       	adc	r31, r19
    1cf6:	90 81       	ld	r25, Z
    1cf8:	9e 01       	movw	r18, r28
    1cfa:	2e 5c       	subi	r18, 0xCE	; 206
    1cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfe:	84 2f       	mov	r24, r20
    1d00:	69 2f       	mov	r22, r25
    1d02:	a9 01       	movw	r20, r18
    1d04:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <DIO_enuGetPinValue>
				{
					_delay_ms(10);
					DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
					if (! Local_u8PinValue)
					{
						while (! Local_u8PinValue)
    1d08:	8a a9       	ldd	r24, Y+50	; 0x32
    1d0a:	88 23       	and	r24, r24
    1d0c:	19 f3       	breq	.-58     	; 0x1cd4 <Keypad_enuGetPressedKey+0x23e>
						{
							DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
						}
						*Copy_pu8KeyValue = Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    1d0e:	88 89       	ldd	r24, Y+16	; 0x10
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d16:	48 2f       	mov	r20, r24
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	22 0f       	add	r18, r18
    1d1c:	33 1f       	adc	r19, r19
    1d1e:	22 0f       	add	r18, r18
    1d20:	33 1f       	adc	r19, r19
    1d22:	ce 01       	movw	r24, r28
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	82 0f       	add	r24, r18
    1d28:	93 1f       	adc	r25, r19
    1d2a:	84 0f       	add	r24, r20
    1d2c:	95 1f       	adc	r25, r21
    1d2e:	fc 01       	movw	r30, r24
    1d30:	b1 96       	adiw	r30, 0x21	; 33
    1d32:	80 81       	ld	r24, Z
    1d34:	eb a9       	ldd	r30, Y+51	; 0x33
    1d36:	fc a9       	ldd	r31, Y+52	; 0x34
    1d38:	80 83       	st	Z, r24

						return Local_enuErrorState=ES_OK;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	89 8b       	std	Y+17, r24	; 0x11
    1d3e:	f9 89       	ldd	r31, Y+17	; 0x11
    1d40:	fd ab       	std	Y+53, r31	; 0x35
    1d42:	2a c0       	rjmp	.+84     	; 0x1d98 <Keypad_enuGetPressedKey+0x302>

		for (Local_u8ColIter =0; Local_u8ColIter < COLS_NUM ; Local_u8ColIter ++)
		{
			DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter] , Local_Au8ColPins[Local_u8ColIter] , DIO_u8LOW);

			for (Local_u8RowIter =0 ; Local_u8RowIter <ROWS_NUM ; Local_u8RowIter ++)
    1d44:	88 89       	ldd	r24, Y+16	; 0x10
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	88 8b       	std	Y+16, r24	; 0x10
    1d4a:	88 89       	ldd	r24, Y+16	; 0x10
    1d4c:	84 30       	cpi	r24, 0x04	; 4
    1d4e:	08 f4       	brcc	.+2      	; 0x1d52 <Keypad_enuGetPressedKey+0x2bc>
    1d50:	13 cf       	rjmp	.-474    	; 0x1b78 <Keypad_enuGetPressedKey+0xe2>
						return Local_enuErrorState=ES_OK;
					}
				}
			}

			DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter] , Local_Au8ColPins[Local_u8ColIter] , DIO_u8HIGH);
    1d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	ce 01       	movw	r24, r28
    1d5a:	4e 96       	adiw	r24, 0x1e	; 30
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	e2 0f       	add	r30, r18
    1d60:	f3 1f       	adc	r31, r19
    1d62:	40 81       	ld	r20, Z
    1d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	46 96       	adiw	r24, 0x16	; 22
    1d6e:	fc 01       	movw	r30, r24
    1d70:	e2 0f       	add	r30, r18
    1d72:	f3 1f       	adc	r31, r19
    1d74:	90 81       	ld	r25, Z
    1d76:	84 2f       	mov	r24, r20
    1d78:	69 2f       	mov	r22, r25
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>

		u8 Local_u8PinValue = 0xff;

		u8 Local_u8RowIter , Local_u8ColIter;

		for (Local_u8ColIter =0; Local_u8ColIter < COLS_NUM ; Local_u8ColIter ++)
    1d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d82:	8f 5f       	subi	r24, 0xFF	; 255
    1d84:	8f 87       	std	Y+15, r24	; 0x0f
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	84 30       	cpi	r24, 0x04	; 4
    1d8a:	08 f4       	brcc	.+2      	; 0x1d8e <Keypad_enuGetPressedKey+0x2f8>
    1d8c:	dc ce       	rjmp	.-584    	; 0x1b46 <Keypad_enuGetPressedKey+0xb0>
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <Keypad_enuGetPressedKey+0x2fe>
			DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter] , Local_Au8ColPins[Local_u8ColIter] , DIO_u8HIGH);
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	89 8b       	std	Y+17, r24	; 0x11
	}

	return Local_enuErrorState;
    1d94:	89 89       	ldd	r24, Y+17	; 0x11
    1d96:	8d ab       	std	Y+53, r24	; 0x35
    1d98:	8d a9       	ldd	r24, Y+53	; 0x35
}
    1d9a:	ea 96       	adiw	r28, 0x3a	; 58
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	e9 97       	sbiw	r28, 0x39	; 57
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    1dc0:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	60 e0       	ldi	r22, 0x00	; 0
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	62 e0       	ldi	r22, 0x02	; 2
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	61 e0       	ldi	r22, 0x01	; 1
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	62 e0       	ldi	r22, 0x02	; 2
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	ac e0       	ldi	r26, 0x0C	; 12
    1e0e:	b2 e4       	ldi	r27, 0x42	; 66
    1e10:	8d ab       	std	Y+53, r24	; 0x35
    1e12:	9e ab       	std	Y+54, r25	; 0x36
    1e14:	af ab       	std	Y+55, r26	; 0x37
    1e16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e18:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	4a e7       	ldi	r20, 0x7A	; 122
    1e26:	53 e4       	ldi	r21, 0x43	; 67
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	89 ab       	std	Y+49, r24	; 0x31
    1e32:	9a ab       	std	Y+50, r25	; 0x32
    1e34:	ab ab       	std	Y+51, r26	; 0x33
    1e36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e38:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e8       	ldi	r20, 0x80	; 128
    1e46:	5f e3       	ldi	r21, 0x3F	; 63
    1e48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e4c:	88 23       	and	r24, r24
    1e4e:	2c f4       	brge	.+10     	; 0x1e5a <LCD_enuInit+0xae>
		__ticks = 1;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	98 ab       	std	Y+48, r25	; 0x30
    1e56:	8f a7       	std	Y+47, r24	; 0x2f
    1e58:	3f c0       	rjmp	.+126    	; 0x1ed8 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1e5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e60:	9c a9       	ldd	r25, Y+52	; 0x34
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	3f ef       	ldi	r19, 0xFF	; 255
    1e66:	4f e7       	ldi	r20, 0x7F	; 127
    1e68:	57 e4       	ldi	r21, 0x47	; 71
    1e6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e6e:	18 16       	cp	r1, r24
    1e70:	4c f5       	brge	.+82     	; 0x1ec4 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e72:	6d a9       	ldd	r22, Y+53	; 0x35
    1e74:	7e a9       	ldd	r23, Y+54	; 0x36
    1e76:	8f a9       	ldd	r24, Y+55	; 0x37
    1e78:	98 ad       	ldd	r25, Y+56	; 0x38
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e2       	ldi	r20, 0x20	; 32
    1e80:	51 e4       	ldi	r21, 0x41	; 65
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	bc 01       	movw	r22, r24
    1e8c:	cd 01       	movw	r24, r26
    1e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	98 ab       	std	Y+48, r25	; 0x30
    1e98:	8f a7       	std	Y+47, r24	; 0x2f
    1e9a:	0f c0       	rjmp	.+30     	; 0x1eba <LCD_enuInit+0x10e>
    1e9c:	89 e1       	ldi	r24, 0x19	; 25
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9e a7       	std	Y+46, r25	; 0x2e
    1ea2:	8d a7       	std	Y+45, r24	; 0x2d
    1ea4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <LCD_enuInit+0xfc>
    1eac:	9e a7       	std	Y+46, r25	; 0x2e
    1eae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	98 ab       	std	Y+48, r25	; 0x30
    1eb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	69 f7       	brne	.-38     	; 0x1e9c <LCD_enuInit+0xf0>
    1ec2:	14 c0       	rjmp	.+40     	; 0x1eec <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eca:	9c a9       	ldd	r25, Y+52	; 0x34
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	98 ab       	std	Y+48, r25	; 0x30
    1ed6:	8f a7       	std	Y+47, r24	; 0x2f
    1ed8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eda:	98 a9       	ldd	r25, Y+48	; 0x30
    1edc:	9c a7       	std	Y+44, r25	; 0x2c
    1ede:	8b a7       	std	Y+43, r24	; 0x2b
    1ee0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <LCD_enuInit+0x138>
    1ee8:	9c a7       	std	Y+44, r25	; 0x2c
    1eea:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	64 e0       	ldi	r22, 0x04	; 4
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	65 e0       	ldi	r22, 0x05	; 5
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	66 e0       	ldi	r22, 0x06	; 6
    1f04:	41 e0       	ldi	r20, 0x01	; 1
    1f06:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	67 e0       	ldi	r22, 0x07	; 7
    1f0e:	41 e0       	ldi	r20, 0x01	; 1
    1f10:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    1f14:	88 e3       	ldi	r24, 0x38	; 56
    1f16:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_invidSendCommend>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a0 e8       	ldi	r26, 0x80	; 128
    1f20:	bf e3       	ldi	r27, 0x3F	; 63
    1f22:	8f a3       	std	Y+39, r24	; 0x27
    1f24:	98 a7       	std	Y+40, r25	; 0x28
    1f26:	a9 a7       	std	Y+41, r26	; 0x29
    1f28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a e7       	ldi	r20, 0x7A	; 122
    1f38:	53 e4       	ldi	r21, 0x43	; 67
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8b a3       	std	Y+35, r24	; 0x23
    1f44:	9c a3       	std	Y+36, r25	; 0x24
    1f46:	ad a3       	std	Y+37, r26	; 0x25
    1f48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f50:	9e a1       	ldd	r25, Y+38	; 0x26
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <LCD_enuInit+0x1c0>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f70:	8d a1       	ldd	r24, Y+37	; 0x25
    1f72:	9e a1       	ldd	r25, Y+38	; 0x26
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6f a1       	ldd	r22, Y+39	; 0x27
    1f86:	78 a5       	ldd	r23, Y+40	; 0x28
    1f88:	89 a5       	ldd	r24, Y+41	; 0x29
    1f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9a a3       	std	Y+34, r25	; 0x22
    1faa:	89 a3       	std	Y+33, r24	; 0x21
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <LCD_enuInit+0x220>
    1fae:	89 e1       	ldi	r24, 0x19	; 25
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	98 a3       	std	Y+32, r25	; 0x20
    1fb4:	8f 8f       	std	Y+31, r24	; 0x1f
    1fb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fb8:	98 a1       	ldd	r25, Y+32	; 0x20
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <LCD_enuInit+0x20e>
    1fbe:	98 a3       	std	Y+32, r25	; 0x20
    1fc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9a a3       	std	Y+34, r25	; 0x22
    1fca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fce:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <LCD_enuInit+0x202>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fda:	8d a1       	ldd	r24, Y+37	; 0x25
    1fdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9a a3       	std	Y+34, r25	; 0x22
    1fe8:	89 a3       	std	Y+33, r24	; 0x21
    1fea:	89 a1       	ldd	r24, Y+33	; 0x21
    1fec:	9a a1       	ldd	r25, Y+34	; 0x22
    1fee:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ff2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ff4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_enuInit+0x24a>
    1ffa:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffc:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    1ffe:	8f e0       	ldi	r24, 0x0F	; 15
    2000:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_invidSendCommend>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a0 e8       	ldi	r26, 0x80	; 128
    200a:	bf e3       	ldi	r27, 0x3F	; 63
    200c:	89 8f       	std	Y+25, r24	; 0x19
    200e:	9a 8f       	std	Y+26, r25	; 0x1a
    2010:	ab 8f       	std	Y+27, r26	; 0x1b
    2012:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	69 8d       	ldd	r22, Y+25	; 0x19
    2016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	53 e4       	ldi	r21, 0x43	; 67
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8d 8b       	std	Y+21, r24	; 0x15
    202e:	9e 8b       	std	Y+22, r25	; 0x16
    2030:	af 8b       	std	Y+23, r26	; 0x17
    2032:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2034:	6d 89       	ldd	r22, Y+21	; 0x15
    2036:	7e 89       	ldd	r23, Y+22	; 0x16
    2038:	8f 89       	ldd	r24, Y+23	; 0x17
    203a:	98 8d       	ldd	r25, Y+24	; 0x18
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <LCD_enuInit+0x2aa>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9c 8b       	std	Y+20, r25	; 0x14
    2052:	8b 8b       	std	Y+19, r24	; 0x13
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	69 8d       	ldd	r22, Y+25	; 0x19
    2070:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2072:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2074:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <LCD_enuInit+0x30a>
    2098:	89 e1       	ldi	r24, 0x19	; 25
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9a 8b       	std	Y+18, r25	; 0x12
    209e:	89 8b       	std	Y+17, r24	; 0x11
    20a0:	89 89       	ldd	r24, Y+17	; 0x11
    20a2:	9a 89       	ldd	r25, Y+18	; 0x12
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <LCD_enuInit+0x2f8>
    20a8:	9a 8b       	std	Y+18, r25	; 0x12
    20aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ac:	8b 89       	ldd	r24, Y+19	; 0x13
    20ae:	9c 89       	ldd	r25, Y+20	; 0x14
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	9c 8b       	std	Y+20, r25	; 0x14
    20b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	8b 89       	ldd	r24, Y+19	; 0x13
    20b8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <LCD_enuInit+0x2ec>
    20be:	14 c0       	rjmp	.+40     	; 0x20e8 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	6d 89       	ldd	r22, Y+21	; 0x15
    20c2:	7e 89       	ldd	r23, Y+22	; 0x16
    20c4:	8f 89       	ldd	r24, Y+23	; 0x17
    20c6:	98 8d       	ldd	r25, Y+24	; 0x18
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9c 8b       	std	Y+20, r25	; 0x14
    20d2:	8b 8b       	std	Y+19, r24	; 0x13
    20d4:	8b 89       	ldd	r24, Y+19	; 0x13
    20d6:	9c 89       	ldd	r25, Y+20	; 0x14
    20d8:	98 8b       	std	Y+16, r25	; 0x10
    20da:	8f 87       	std	Y+15, r24	; 0x0f
    20dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20de:	98 89       	ldd	r25, Y+16	; 0x10
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_enuInit+0x334>
    20e4:	98 8b       	std	Y+16, r25	; 0x10
    20e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_invidSendCommend>
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a0 e0       	ldi	r26, 0x00	; 0
    20f4:	b0 e4       	ldi	r27, 0x40	; 64
    20f6:	8b 87       	std	Y+11, r24	; 0x0b
    20f8:	9c 87       	std	Y+12, r25	; 0x0c
    20fa:	ad 87       	std	Y+13, r26	; 0x0d
    20fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2100:	7c 85       	ldd	r23, Y+12	; 0x0c
    2102:	8d 85       	ldd	r24, Y+13	; 0x0d
    2104:	9e 85       	ldd	r25, Y+14	; 0x0e
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a e7       	ldi	r20, 0x7A	; 122
    210c:	53 e4       	ldi	r21, 0x43	; 67
    210e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8f 83       	std	Y+7, r24	; 0x07
    2118:	98 87       	std	Y+8, r25	; 0x08
    211a:	a9 87       	std	Y+9, r26	; 0x09
    211c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211e:	6f 81       	ldd	r22, Y+7	; 0x07
    2120:	78 85       	ldd	r23, Y+8	; 0x08
    2122:	89 85       	ldd	r24, Y+9	; 0x09
    2124:	9a 85       	ldd	r25, Y+10	; 0x0a
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <LCD_enuInit+0x394>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	3f c0       	rjmp	.+126    	; 0x21be <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	57 e4       	ldi	r21, 0x47	; 71
    2150:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	4c f5       	brge	.+82     	; 0x21aa <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <LCD_enuInit+0x3f4>
    2182:	89 e1       	ldi	r24, 0x19	; 25
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9c 83       	std	Y+4, r25	; 0x04
    2188:	8b 83       	std	Y+3, r24	; 0x03
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_enuInit+0x3e2>
    2192:	9c 83       	std	Y+4, r25	; 0x04
    2194:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	8d 81       	ldd	r24, Y+5	; 0x05
    2198:	9e 81       	ldd	r25, Y+6	; 0x06
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	9e 83       	std	Y+6, r25	; 0x06
    219e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	69 f7       	brne	.-38     	; 0x2182 <LCD_enuInit+0x3d6>
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	6f 81       	ldd	r22, Y+7	; 0x07
    21ac:	78 85       	ldd	r23, Y+8	; 0x08
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9e 83       	std	Y+6, r25	; 0x06
    21bc:	8d 83       	std	Y+5, r24	; 0x05
    21be:	8d 81       	ldd	r24, Y+5	; 0x05
    21c0:	9e 81       	ldd	r25, Y+6	; 0x06
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_enuInit+0x41e>
    21ce:	9a 83       	std	Y+2, r25	; 0x02
    21d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    21d2:	86 e0       	ldi	r24, 0x06	; 6
    21d4:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_invidSendCommend>

	return Local_enuErrorState;
    21d8:	89 ad       	ldd	r24, Y+57	; 0x39
}
    21da:	e9 96       	adiw	r28, 0x39	; 57
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <LCD_enuDisplayChar+0x6>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    21f8:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Data);
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_vidLatch>

	return Local_enuErrorState;
    220a:	89 81       	ldd	r24, Y+1	; 0x01
}
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	00 d0       	rcall	.+0      	; 0x221c <LCD_enuSendCommand+0x6>
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2222:	19 82       	std	Y+1, r1	; 0x01

	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_vidLatch>


	return Local_enuErrorState;
    2234:	89 81       	ldd	r24, Y+1	; 0x01
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <LCD_enuDisplayIntegerNum>:


ES_t LCD_enuDisplayIntegerNum(s32 Copy_s32Num)
{
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	2b 97       	sbiw	r28, 0x0b	; 11
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	68 87       	std	Y+8, r22	; 0x08
    2256:	79 87       	std	Y+9, r23	; 0x09
    2258:	8a 87       	std	Y+10, r24	; 0x0a
    225a:	9b 87       	std	Y+11, r25	; 0x0b
	ES_t Local_enuErrorState = ES_NOK;
    225c:	1f 82       	std	Y+7, r1	; 0x07

	s32 Local_s32Reverse=0;
    225e:	1b 82       	std	Y+3, r1	; 0x03
    2260:	1c 82       	std	Y+4, r1	; 0x04
    2262:	1d 82       	std	Y+5, r1	; 0x05
    2264:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8Remainder=0 , Local_u8NumDigit=0;
    2266:	1a 82       	std	Y+2, r1	; 0x02
    2268:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_s32Num==0)
    226a:	88 85       	ldd	r24, Y+8	; 0x08
    226c:	99 85       	ldd	r25, Y+9	; 0x09
    226e:	aa 85       	ldd	r26, Y+10	; 0x0a
    2270:	bb 85       	ldd	r27, Y+11	; 0x0b
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	a1 05       	cpc	r26, r1
    2276:	b1 05       	cpc	r27, r1
    2278:	49 f4       	brne	.+18     	; 0x228c <LCD_enuDisplayIntegerNum+0x4c>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	60 e0       	ldi	r22, 0x00	; 0
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
				LCD_vidLatch('0');
    2284:	80 e3       	ldi	r24, 0x30	; 48
    2286:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_vidLatch>
    228a:	98 c0       	rjmp	.+304    	; 0x23bc <LCD_enuDisplayIntegerNum+0x17c>
	}
	else
	{


	if(Copy_s32Num <0)
    228c:	88 85       	ldd	r24, Y+8	; 0x08
    228e:	99 85       	ldd	r25, Y+9	; 0x09
    2290:	aa 85       	ldd	r26, Y+10	; 0x0a
    2292:	bb 85       	ldd	r27, Y+11	; 0x0b
    2294:	bb 23       	and	r27, r27
    2296:	0c f0       	brlt	.+2      	; 0x229a <LCD_enuDisplayIntegerNum+0x5a>
    2298:	57 c0       	rjmp	.+174    	; 0x2348 <LCD_enuDisplayIntegerNum+0x108>
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
		LCD_vidLatch('-');
    22a4:	8d e2       	ldi	r24, 0x2D	; 45
    22a6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_vidLatch>
		Copy_s32Num *= -1 ;
    22aa:	88 85       	ldd	r24, Y+8	; 0x08
    22ac:	99 85       	ldd	r25, Y+9	; 0x09
    22ae:	aa 85       	ldd	r26, Y+10	; 0x0a
    22b0:	bb 85       	ldd	r27, Y+11	; 0x0b
    22b2:	b0 95       	com	r27
    22b4:	a0 95       	com	r26
    22b6:	90 95       	com	r25
    22b8:	81 95       	neg	r24
    22ba:	9f 4f       	sbci	r25, 0xFF	; 255
    22bc:	af 4f       	sbci	r26, 0xFF	; 255
    22be:	bf 4f       	sbci	r27, 0xFF	; 255
    22c0:	88 87       	std	Y+8, r24	; 0x08
    22c2:	99 87       	std	Y+9, r25	; 0x09
    22c4:	aa 87       	std	Y+10, r26	; 0x0a
    22c6:	bb 87       	std	Y+11, r27	; 0x0b
    22c8:	3f c0       	rjmp	.+126    	; 0x2348 <LCD_enuDisplayIntegerNum+0x108>
	}
	while (Copy_s32Num)
	{
		Local_u8Remainder = Copy_s32Num % 10;
    22ca:	88 85       	ldd	r24, Y+8	; 0x08
    22cc:	99 85       	ldd	r25, Y+9	; 0x09
    22ce:	aa 85       	ldd	r26, Y+10	; 0x0a
    22d0:	bb 85       	ldd	r27, Y+11	; 0x0b
    22d2:	2a e0       	ldi	r18, 0x0A	; 10
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divmodsi4>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	8a 83       	std	Y+2, r24	; 0x02
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	ad 81       	ldd	r26, Y+5	; 0x05
    22ee:	be 81       	ldd	r27, Y+6	; 0x06
    22f0:	2a e0       	ldi	r18, 0x0A	; 10
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	bc 01       	movw	r22, r24
    22fa:	cd 01       	movw	r24, r26
    22fc:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__mulsi3>
    2300:	9b 01       	movw	r18, r22
    2302:	ac 01       	movw	r20, r24
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e0       	ldi	r26, 0x00	; 0
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	82 0f       	add	r24, r18
    2310:	93 1f       	adc	r25, r19
    2312:	a4 1f       	adc	r26, r20
    2314:	b5 1f       	adc	r27, r21
    2316:	8b 83       	std	Y+3, r24	; 0x03
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	ad 83       	std	Y+5, r26	; 0x05
    231c:	be 83       	std	Y+6, r27	; 0x06
		Copy_s32Num /=10;
    231e:	88 85       	ldd	r24, Y+8	; 0x08
    2320:	99 85       	ldd	r25, Y+9	; 0x09
    2322:	aa 85       	ldd	r26, Y+10	; 0x0a
    2324:	bb 85       	ldd	r27, Y+11	; 0x0b
    2326:	2a e0       	ldi	r18, 0x0A	; 10
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	50 e0       	ldi	r21, 0x00	; 0
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divmodsi4>
    2336:	da 01       	movw	r26, r20
    2338:	c9 01       	movw	r24, r18
    233a:	88 87       	std	Y+8, r24	; 0x08
    233c:	99 87       	std	Y+9, r25	; 0x09
    233e:	aa 87       	std	Y+10, r26	; 0x0a
    2340:	bb 87       	std	Y+11, r27	; 0x0b
		Local_u8NumDigit ++;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	8f 5f       	subi	r24, 0xFF	; 255
    2346:	89 83       	std	Y+1, r24	; 0x01
	{
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		LCD_vidLatch('-');
		Copy_s32Num *= -1 ;
	}
	while (Copy_s32Num)
    2348:	88 85       	ldd	r24, Y+8	; 0x08
    234a:	99 85       	ldd	r25, Y+9	; 0x09
    234c:	aa 85       	ldd	r26, Y+10	; 0x0a
    234e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	a1 05       	cpc	r26, r1
    2354:	b1 05       	cpc	r27, r1
    2356:	09 f0       	breq	.+2      	; 0x235a <LCD_enuDisplayIntegerNum+0x11a>
    2358:	b8 cf       	rjmp	.-144    	; 0x22ca <LCD_enuDisplayIntegerNum+0x8a>
    235a:	2d c0       	rjmp	.+90     	; 0x23b6 <LCD_enuDisplayIntegerNum+0x176>
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
	{
		Local_u8Remainder = Local_s32Reverse % 10;
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	ad 81       	ldd	r26, Y+5	; 0x05
    2362:	be 81       	ldd	r27, Y+6	; 0x06
    2364:	2a e0       	ldi	r18, 0x0A	; 10
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divmodsi4>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8a 83       	std	Y+2, r24	; 0x02
		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
		LCD_vidLatch(Local_u8Remainder + '0');
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	80 5d       	subi	r24, 0xD0	; 208
    2388:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_vidLatch>
		Local_s32Reverse /= 10;
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	ad 81       	ldd	r26, Y+5	; 0x05
    2392:	be 81       	ldd	r27, Y+6	; 0x06
    2394:	2a e0       	ldi	r18, 0x0A	; 10
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	bc 01       	movw	r22, r24
    239e:	cd 01       	movw	r24, r26
    23a0:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__divmodsi4>
    23a4:	da 01       	movw	r26, r20
    23a6:	c9 01       	movw	r24, r18
    23a8:	8b 83       	std	Y+3, r24	; 0x03
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	ad 83       	std	Y+5, r26	; 0x05
    23ae:	be 83       	std	Y+6, r27	; 0x06
		Local_u8NumDigit --;
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	81 50       	subi	r24, 0x01	; 1
    23b4:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Reverse = Local_s32Reverse * 10 + Local_u8Remainder;
		Copy_s32Num /=10;
		Local_u8NumDigit ++;
	}

	while (Local_u8NumDigit)
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	88 23       	and	r24, r24
    23ba:	81 f6       	brne	.-96     	; 0x235c <LCD_enuDisplayIntegerNum+0x11c>
		Local_u8NumDigit --;
	}

	}

	return Local_enuErrorState;
    23bc:	8f 81       	ldd	r24, Y+7	; 0x07
}
    23be:	2b 96       	adiw	r28, 0x0b	; 11
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	cd bf       	out	0x3d, r28	; 61
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <LCD_vidLatch>:




static void LCD_vidLatch(u8 Copy_u8Data)
{
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	6d 97       	sbiw	r28, 0x1d	; 29
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	62 e0       	ldi	r22, 0x02	; 2
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    23fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23fc:	98 2f       	mov	r25, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	99 27       	eor	r25, r25
    2402:	99 1f       	adc	r25, r25
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	60 e0       	ldi	r22, 0x00	; 0
    2408:	49 2f       	mov	r20, r25
    240a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    240e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2410:	82 95       	swap	r24
    2412:	86 95       	lsr	r24
    2414:	86 95       	lsr	r24
    2416:	83 70       	andi	r24, 0x03	; 3
    2418:	98 2f       	mov	r25, r24
    241a:	91 70       	andi	r25, 0x01	; 1
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	61 e0       	ldi	r22, 0x01	; 1
    2420:	49 2f       	mov	r20, r25
    2422:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    2426:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2428:	82 95       	swap	r24
    242a:	86 95       	lsr	r24
    242c:	87 70       	andi	r24, 0x07	; 7
    242e:	98 2f       	mov	r25, r24
    2430:	91 70       	andi	r25, 0x01	; 1
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	62 e0       	ldi	r22, 0x02	; 2
    2436:	49 2f       	mov	r20, r25
    2438:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    243c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    243e:	82 95       	swap	r24
    2440:	8f 70       	andi	r24, 0x0F	; 15
    2442:	98 2f       	mov	r25, r24
    2444:	91 70       	andi	r25, 0x01	; 1
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	63 e0       	ldi	r22, 0x03	; 3
    244a:	49 2f       	mov	r20, r25
    244c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    2450:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2452:	86 95       	lsr	r24
    2454:	86 95       	lsr	r24
    2456:	86 95       	lsr	r24
    2458:	98 2f       	mov	r25, r24
    245a:	91 70       	andi	r25, 0x01	; 1
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	64 e0       	ldi	r22, 0x04	; 4
    2460:	49 2f       	mov	r20, r25
    2462:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    2466:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2468:	86 95       	lsr	r24
    246a:	86 95       	lsr	r24
    246c:	98 2f       	mov	r25, r24
    246e:	91 70       	andi	r25, 0x01	; 1
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	65 e0       	ldi	r22, 0x05	; 5
    2474:	49 2f       	mov	r20, r25
    2476:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    247a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247c:	86 95       	lsr	r24
    247e:	98 2f       	mov	r25, r24
    2480:	91 70       	andi	r25, 0x01	; 1
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	66 e0       	ldi	r22, 0x06	; 6
    2486:	49 2f       	mov	r20, r25
    2488:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    248c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    248e:	98 2f       	mov	r25, r24
    2490:	91 70       	andi	r25, 0x01	; 1
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	67 e0       	ldi	r22, 0x07	; 7
    2496:	49 2f       	mov	r20, r25
    2498:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>0)&1));
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e2       	ldi	r26, 0x20	; 32
    24ac:	b1 e4       	ldi	r27, 0x41	; 65
    24ae:	89 8f       	std	Y+25, r24	; 0x19
    24b0:	9a 8f       	std	Y+26, r25	; 0x1a
    24b2:	ab 8f       	std	Y+27, r26	; 0x1b
    24b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	69 8d       	ldd	r22, Y+25	; 0x19
    24b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a e7       	ldi	r20, 0x7A	; 122
    24c4:	53 e4       	ldi	r21, 0x43	; 67
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8d 8b       	std	Y+21, r24	; 0x15
    24d0:	9e 8b       	std	Y+22, r25	; 0x16
    24d2:	af 8b       	std	Y+23, r26	; 0x17
    24d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_vidLatch+0x128>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 8b       	std	Y+20, r25	; 0x14
    24f4:	8b 8b       	std	Y+19, r24	; 0x13
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    24f8:	6d 89       	ldd	r22, Y+21	; 0x15
    24fa:	7e 89       	ldd	r23, Y+22	; 0x16
    24fc:	8f 89       	ldd	r24, Y+23	; 0x17
    24fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	69 8d       	ldd	r22, Y+25	; 0x19
    2512:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2514:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2516:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_vidLatch+0x188>
    253a:	89 e1       	ldi	r24, 0x19	; 25
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9a 8b       	std	Y+18, r25	; 0x12
    2540:	89 8b       	std	Y+17, r24	; 0x11
    2542:	89 89       	ldd	r24, Y+17	; 0x11
    2544:	9a 89       	ldd	r25, Y+18	; 0x12
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_vidLatch+0x176>
    254a:	9a 8b       	std	Y+18, r25	; 0x12
    254c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8b 89       	ldd	r24, Y+19	; 0x13
    2550:	9c 89       	ldd	r25, Y+20	; 0x14
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9c 8b       	std	Y+20, r25	; 0x14
    2556:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8b 89       	ldd	r24, Y+19	; 0x13
    255a:	9c 89       	ldd	r25, Y+20	; 0x14
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_vidLatch+0x16a>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6d 89       	ldd	r22, Y+21	; 0x15
    2564:	7e 89       	ldd	r23, Y+22	; 0x16
    2566:	8f 89       	ldd	r24, Y+23	; 0x17
    2568:	98 8d       	ldd	r25, Y+24	; 0x18
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9c 8b       	std	Y+20, r25	; 0x14
    2574:	8b 8b       	std	Y+19, r24	; 0x13
    2576:	8b 89       	ldd	r24, Y+19	; 0x13
    2578:	9c 89       	ldd	r25, Y+20	; 0x14
    257a:	98 8b       	std	Y+16, r25	; 0x10
    257c:	8f 87       	std	Y+15, r24	; 0x0f
    257e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2580:	98 89       	ldd	r25, Y+16	; 0x10
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_vidLatch+0x1b2>
    2586:	98 8b       	std	Y+16, r25	; 0x10
    2588:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	62 e0       	ldi	r22, 0x02	; 2
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e2       	ldi	r26, 0x20	; 32
    259a:	b1 e4       	ldi	r27, 0x41	; 65
    259c:	8b 87       	std	Y+11, r24	; 0x0b
    259e:	9c 87       	std	Y+12, r25	; 0x0c
    25a0:	ad 87       	std	Y+13, r26	; 0x0d
    25a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a e7       	ldi	r20, 0x7A	; 122
    25b2:	53 e4       	ldi	r21, 0x43	; 67
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8f 83       	std	Y+7, r24	; 0x07
    25be:	98 87       	std	Y+8, r25	; 0x08
    25c0:	a9 87       	std	Y+9, r26	; 0x09
    25c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	2c f4       	brge	.+10     	; 0x25e6 <LCD_vidLatch+0x216>
		__ticks = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9e 83       	std	Y+6, r25	; 0x06
    25e2:	8d 83       	std	Y+5, r24	; 0x05
    25e4:	3f c0       	rjmp	.+126    	; 0x2664 <LCD_vidLatch+0x294>
	else if (__tmp > 65535)
    25e6:	6f 81       	ldd	r22, Y+7	; 0x07
    25e8:	78 85       	ldd	r23, Y+8	; 0x08
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	4c f5       	brge	.+82     	; 0x2650 <LCD_vidLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2600:	7c 85       	ldd	r23, Y+12	; 0x0c
    2602:	8d 85       	ldd	r24, Y+13	; 0x0d
    2604:	9e 85       	ldd	r25, Y+14	; 0x0e
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e2       	ldi	r20, 0x20	; 32
    260c:	51 e4       	ldi	r21, 0x41	; 65
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9e 83       	std	Y+6, r25	; 0x06
    2624:	8d 83       	std	Y+5, r24	; 0x05
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <LCD_vidLatch+0x276>
    2628:	89 e1       	ldi	r24, 0x19	; 25
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	9c 81       	ldd	r25, Y+4	; 0x04
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_vidLatch+0x264>
    2638:	9c 83       	std	Y+4, r25	; 0x04
    263a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	9e 81       	ldd	r25, Y+6	; 0x06
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	69 f7       	brne	.-38     	; 0x2628 <LCD_vidLatch+0x258>
    264e:	14 c0       	rjmp	.+40     	; 0x2678 <LCD_vidLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2650:	6f 81       	ldd	r22, Y+7	; 0x07
    2652:	78 85       	ldd	r23, Y+8	; 0x08
    2654:	89 85       	ldd	r24, Y+9	; 0x09
    2656:	9a 85       	ldd	r25, Y+10	; 0x0a
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9e 83       	std	Y+6, r25	; 0x06
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_vidLatch+0x2a0>
    2674:	9a 83       	std	Y+2, r25	; 0x02
    2676:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(10);
}
    2678:	6d 96       	adiw	r28, 0x1d	; 29
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <LCD_invidSendCommend>:


static inline void LCD_invidSendCommend(u8 Copy_u8Command)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	2f 97       	sbiw	r28, 0x0f	; 15
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	61 e0       	ldi	r22, 0x01	; 1
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	62 e0       	ldi	r22, 0x02	; 2
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    26be:	8f 85       	ldd	r24, Y+15	; 0x0f
    26c0:	98 2f       	mov	r25, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	99 27       	eor	r25, r25
    26c6:	99 1f       	adc	r25, r25
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	60 e0       	ldi	r22, 0x00	; 0
    26cc:	49 2f       	mov	r20, r25
    26ce:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    26d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d4:	82 95       	swap	r24
    26d6:	86 95       	lsr	r24
    26d8:	86 95       	lsr	r24
    26da:	83 70       	andi	r24, 0x03	; 3
    26dc:	98 2f       	mov	r25, r24
    26de:	91 70       	andi	r25, 0x01	; 1
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	61 e0       	ldi	r22, 0x01	; 1
    26e4:	49 2f       	mov	r20, r25
    26e6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    26ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ec:	82 95       	swap	r24
    26ee:	86 95       	lsr	r24
    26f0:	87 70       	andi	r24, 0x07	; 7
    26f2:	98 2f       	mov	r25, r24
    26f4:	91 70       	andi	r25, 0x01	; 1
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	62 e0       	ldi	r22, 0x02	; 2
    26fa:	49 2f       	mov	r20, r25
    26fc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    2700:	8f 85       	ldd	r24, Y+15	; 0x0f
    2702:	82 95       	swap	r24
    2704:	8f 70       	andi	r24, 0x0F	; 15
    2706:	98 2f       	mov	r25, r24
    2708:	91 70       	andi	r25, 0x01	; 1
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	63 e0       	ldi	r22, 0x03	; 3
    270e:	49 2f       	mov	r20, r25
    2710:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    2714:	8f 85       	ldd	r24, Y+15	; 0x0f
    2716:	86 95       	lsr	r24
    2718:	86 95       	lsr	r24
    271a:	86 95       	lsr	r24
    271c:	98 2f       	mov	r25, r24
    271e:	91 70       	andi	r25, 0x01	; 1
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	64 e0       	ldi	r22, 0x04	; 4
    2724:	49 2f       	mov	r20, r25
    2726:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    272a:	8f 85       	ldd	r24, Y+15	; 0x0f
    272c:	86 95       	lsr	r24
    272e:	86 95       	lsr	r24
    2730:	98 2f       	mov	r25, r24
    2732:	91 70       	andi	r25, 0x01	; 1
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	65 e0       	ldi	r22, 0x05	; 5
    2738:	49 2f       	mov	r20, r25
    273a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    273e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2740:	86 95       	lsr	r24
    2742:	98 2f       	mov	r25, r24
    2744:	91 70       	andi	r25, 0x01	; 1
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	66 e0       	ldi	r22, 0x06	; 6
    274a:	49 2f       	mov	r20, r25
    274c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    2750:	8f 85       	ldd	r24, Y+15	; 0x0f
    2752:	98 2f       	mov	r25, r24
    2754:	91 70       	andi	r25, 0x01	; 1
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	67 e0       	ldi	r22, 0x07	; 7
    275a:	49 2f       	mov	r20, r25
    275c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>2)&1));
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>1)&1));
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>0)&1));

#endif
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	62 e0       	ldi	r22, 0x02	; 2
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e2       	ldi	r26, 0x20	; 32
    2770:	b1 e4       	ldi	r27, 0x41	; 65
    2772:	8b 87       	std	Y+11, r24	; 0x0b
    2774:	9c 87       	std	Y+12, r25	; 0x0c
    2776:	ad 87       	std	Y+13, r26	; 0x0d
    2778:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	6b 85       	ldd	r22, Y+11	; 0x0b
    277c:	7c 85       	ldd	r23, Y+12	; 0x0c
    277e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2780:	9e 85       	ldd	r25, Y+14	; 0x0e
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	53 e4       	ldi	r21, 0x43	; 67
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8f 83       	std	Y+7, r24	; 0x07
    2794:	98 87       	std	Y+8, r25	; 0x08
    2796:	a9 87       	std	Y+9, r26	; 0x09
    2798:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <LCD_invidSendCommend+0x132>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
    27ba:	3f c0       	rjmp	.+126    	; 0x283a <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	4c f5       	brge	.+82     	; 0x2826 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27da:	9e 85       	ldd	r25, Y+14	; 0x0e
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9e 83       	std	Y+6, r25	; 0x06
    27fa:	8d 83       	std	Y+5, r24	; 0x05
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <LCD_invidSendCommend+0x192>
    27fe:	89 e1       	ldi	r24, 0x19	; 25
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_invidSendCommend+0x180>
    280e:	9c 83       	std	Y+4, r25	; 0x04
    2810:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <LCD_invidSendCommend+0x174>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	6f 81       	ldd	r22, Y+7	; 0x07
    2828:	78 85       	ldd	r23, Y+8	; 0x08
    282a:	89 85       	ldd	r24, Y+9	; 0x09
    282c:	9a 85       	ldd	r25, Y+10	; 0x0a
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	8d 83       	std	Y+5, r24	; 0x05
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	9a 83       	std	Y+2, r25	; 0x02
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_invidSendCommend+0x1bc>
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	62 e0       	ldi	r22, 0x02	; 2
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
}
    2858:	2f 96       	adiw	r28, 0x0f	; 15
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(u8 Copy_au8Data[])
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	00 d0       	rcall	.+0      	; 0x2870 <LCD_enuDisplayString+0x6>
    2870:	00 d0       	rcall	.+0      	; 0x2872 <LCD_enuDisplayString+0x8>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9c 83       	std	Y+4, r25	; 0x04
    2878:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    287a:	1a 82       	std	Y+2, r1	; 0x02

		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	60 e0       	ldi	r22, 0x00	; 0
    2880:	41 e0       	ldi	r20, 0x01	; 1
    2882:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <DIO_enuSetPinValue>
		for(u8 i=0;Copy_au8Data[i] != '\0';i++)
    2886:	19 82       	std	Y+1, r1	; 0x01
    2888:	0e c0       	rjmp	.+28     	; 0x28a6 <LCD_enuDisplayString+0x3c>

		LCD_vidLatch(Copy_au8Data[i]);
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9c 81       	ldd	r25, Y+4	; 0x04
    2894:	fc 01       	movw	r30, r24
    2896:	e2 0f       	add	r30, r18
    2898:	f3 1f       	adc	r31, r19
    289a:	80 81       	ld	r24, Z
    289c:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LCD_vidLatch>
ES_t LCD_enuDisplayString(u8 Copy_au8Data[])
{
	ES_t Local_enuErrorState = ES_NOK;

		DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8HIGH);
		for(u8 i=0;Copy_au8Data[i] != '\0';i++)
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	8f 5f       	subi	r24, 0xFF	; 255
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	fc 01       	movw	r30, r24
    28b2:	e2 0f       	add	r30, r18
    28b4:	f3 1f       	adc	r31, r19
    28b6:	80 81       	ld	r24, Z
    28b8:	88 23       	and	r24, r24
    28ba:	39 f7       	brne	.-50     	; 0x288a <LCD_enuDisplayString+0x20>

		LCD_vidLatch(Copy_au8Data[i]);

		return Local_enuErrorState;
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02

}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	cf 91       	pop	r28
    28c8:	df 91       	pop	r29
    28ca:	08 95       	ret

000028cc <CreateStack>:
#include "Stack.h"
void CreateStack(Stack *ps)
{
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <CreateStack+0x6>
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	9a 83       	std	Y+2, r25	; 0x02
    28d8:	89 83       	std	Y+1, r24	; 0x01
    ps->top=0;
    28da:	e9 81       	ldd	r30, Y+1	; 0x01
    28dc:	fa 81       	ldd	r31, Y+2	; 0x02
    28de:	11 82       	std	Z+1, r1	; 0x01
    28e0:	10 82       	st	Z, r1
}
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <StackFull>:
int StackFull(Stack *ps)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <StackFull+0x6>
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <StackFull+0x8>
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	9a 83       	std	Y+2, r25	; 0x02
    28fa:	89 83       	std	Y+1, r24	; 0x01
    return ps->top >= MaxStack;
    28fc:	e9 81       	ldd	r30, Y+1	; 0x01
    28fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	1c 82       	std	Y+4, r1	; 0x04
    2906:	1b 82       	std	Y+3, r1	; 0x03
    2908:	84 36       	cpi	r24, 0x64	; 100
    290a:	91 05       	cpc	r25, r1
    290c:	24 f0       	brlt	.+8      	; 0x2916 <StackFull+0x2a>
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9c 83       	std	Y+4, r25	; 0x04
    2914:	8b 83       	std	Y+3, r24	; 0x03
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <Push>:
void Push(StackEntry e , Stack *ps)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <Push+0x6>
    292e:	00 d0       	rcall	.+0      	; 0x2930 <Push+0x8>
    2930:	00 d0       	rcall	.+0      	; 0x2932 <Push+0xa>
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	69 83       	std	Y+1, r22	; 0x01
    2938:	7a 83       	std	Y+2, r23	; 0x02
    293a:	8b 83       	std	Y+3, r24	; 0x03
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	5e 83       	std	Y+6, r21	; 0x06
    2940:	4d 83       	std	Y+5, r20	; 0x05
    ps->entry[ps->top]=e;
    2942:	ed 81       	ldd	r30, Y+5	; 0x05
    2944:	fe 81       	ldd	r31, Y+6	; 0x06
    2946:	80 81       	ld	r24, Z
    2948:	91 81       	ldd	r25, Z+1	; 0x01
    294a:	2d 81       	ldd	r18, Y+5	; 0x05
    294c:	3e 81       	ldd	r19, Y+6	; 0x06
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	f9 01       	movw	r30, r18
    295a:	e8 0f       	add	r30, r24
    295c:	f9 1f       	adc	r31, r25
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	ab 81       	ldd	r26, Y+3	; 0x03
    2964:	bc 81       	ldd	r27, Y+4	; 0x04
    2966:	80 83       	st	Z, r24
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	a2 83       	std	Z+2, r26	; 0x02
    296c:	b3 83       	std	Z+3, r27	; 0x03
    ps->top++;
    296e:	ed 81       	ldd	r30, Y+5	; 0x05
    2970:	fe 81       	ldd	r31, Y+6	; 0x06
    2972:	80 81       	ld	r24, Z
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	01 96       	adiw	r24, 0x01	; 1
    2978:	ed 81       	ldd	r30, Y+5	; 0x05
    297a:	fe 81       	ldd	r31, Y+6	; 0x06
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
}
    2980:	26 96       	adiw	r28, 0x06	; 6
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <Pop>:
void Pop(StackEntry *pe , Stack *ps)
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	00 d0       	rcall	.+0      	; 0x2998 <Pop+0x6>
    2998:	00 d0       	rcall	.+0      	; 0x299a <Pop+0x8>
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
    29a2:	7c 83       	std	Y+4, r23	; 0x04
    29a4:	6b 83       	std	Y+3, r22	; 0x03
    *pe=ps->entry[--ps->top];
    29a6:	eb 81       	ldd	r30, Y+3	; 0x03
    29a8:	fc 81       	ldd	r31, Y+4	; 0x04
    29aa:	80 81       	ld	r24, Z
    29ac:	91 81       	ldd	r25, Z+1	; 0x01
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	eb 81       	ldd	r30, Y+3	; 0x03
    29b2:	fc 81       	ldd	r31, Y+4	; 0x04
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24
    29b8:	eb 81       	ldd	r30, Y+3	; 0x03
    29ba:	fc 81       	ldd	r31, Y+4	; 0x04
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	2b 81       	ldd	r18, Y+3	; 0x03
    29c2:	3c 81       	ldd	r19, Y+4	; 0x04
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	01 96       	adiw	r24, 0x01	; 1
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	f9 01       	movw	r30, r18
    29d0:	e8 0f       	add	r30, r24
    29d2:	f9 1f       	adc	r31, r25
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	a2 81       	ldd	r26, Z+2	; 0x02
    29da:	b3 81       	ldd	r27, Z+3	; 0x03
    29dc:	e9 81       	ldd	r30, Y+1	; 0x01
    29de:	fa 81       	ldd	r31, Y+2	; 0x02
    29e0:	80 83       	st	Z, r24
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	a2 83       	std	Z+2, r26	; 0x02
    29e6:	b3 83       	std	Z+3, r27	; 0x03
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <StackEmpty>:

int StackEmpty(Stack *ps)
{
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <StackEmpty+0x6>
    29fc:	00 d0       	rcall	.+0      	; 0x29fe <StackEmpty+0x8>
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	89 83       	std	Y+1, r24	; 0x01
    return !ps->top;
    2a06:	e9 81       	ldd	r30, Y+1	; 0x01
    2a08:	fa 81       	ldd	r31, Y+2	; 0x02
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	1c 82       	std	Y+4, r1	; 0x04
    2a10:	1b 82       	std	Y+3, r1	; 0x03
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	21 f4       	brne	.+8      	; 0x2a1e <StackEmpty+0x28>
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	9c 83       	std	Y+4, r25	; 0x04
    2a1c:	8b 83       	std	Y+3, r24	; 0x03
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <StackTop>:

void StackTop(StackEntry *pe,Stack *ps)
{
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <StackTop+0x6>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <StackTop+0x8>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	7c 83       	std	Y+4, r23	; 0x04
    2a42:	6b 83       	std	Y+3, r22	; 0x03
    *pe=ps->entry[ps->top -1];
    2a44:	eb 81       	ldd	r30, Y+3	; 0x03
    2a46:	fc 81       	ldd	r31, Y+4	; 0x04
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a50:	3c 81       	ldd	r19, Y+4	; 0x04
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	01 96       	adiw	r24, 0x01	; 1
    2a58:	88 0f       	add	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	e8 0f       	add	r30, r24
    2a60:	f9 1f       	adc	r31, r25
    2a62:	80 81       	ld	r24, Z
    2a64:	91 81       	ldd	r25, Z+1	; 0x01
    2a66:	a2 81       	ldd	r26, Z+2	; 0x02
    2a68:	b3 81       	ldd	r27, Z+3	; 0x03
    2a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6e:	80 83       	st	Z, r24
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	a2 83       	std	Z+2, r26	; 0x02
    2a74:	b3 83       	std	Z+3, r27	; 0x03
}
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <StackSize>:

int StackSize(Stack *ps)
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <StackSize+0x6>
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
    return ps->top;
    2a92:	e9 81       	ldd	r30, Y+1	; 0x01
    2a94:	fa 81       	ldd	r31, Y+2	; 0x02
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
}
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <ClearStack>:

void ClearStack(Stack *ps)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <ClearStack+0x6>
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    ps->top=0;
    2ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab6:	11 82       	std	Z+1, r1	; 0x01
    2ab8:	10 82       	st	Z, r1
}
    2aba:	0f 90       	pop	r0
    2abc:	0f 90       	pop	r0
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <TraverseStack>:

void TraverseStack(Stack *ps,void (*pf) (StackEntry))
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <TraverseStack+0x6>
    2aca:	00 d0       	rcall	.+0      	; 0x2acc <TraverseStack+0x8>
    2acc:	00 d0       	rcall	.+0      	; 0x2ace <TraverseStack+0xa>
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	7e 83       	std	Y+6, r23	; 0x06
    2ad8:	6d 83       	std	Y+5, r22	; 0x05
    for(int i=ps->top;i>0;i--)
    2ada:	eb 81       	ldd	r30, Y+3	; 0x03
    2adc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	9a 83       	std	Y+2, r25	; 0x02
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	1b c0       	rjmp	.+54     	; 0x2b1e <TraverseStack+0x5a>
    {
        (*pf)(ps->entry[i-1]);
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	9a 81       	ldd	r25, Y+2	; 0x02
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	2b 81       	ldd	r18, Y+3	; 0x03
    2af0:	3c 81       	ldd	r19, Y+4	; 0x04
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	f9 01       	movw	r30, r18
    2afe:	e8 0f       	add	r30, r24
    2b00:	f9 1f       	adc	r31, r25
    2b02:	80 81       	ld	r24, Z
    2b04:	91 81       	ldd	r25, Z+1	; 0x01
    2b06:	a2 81       	ldd	r26, Z+2	; 0x02
    2b08:	b3 81       	ldd	r27, Z+3	; 0x03
    2b0a:	ed 81       	ldd	r30, Y+5	; 0x05
    2b0c:	fe 81       	ldd	r31, Y+6	; 0x06
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	09 95       	icall
    ps->top=0;
}

void TraverseStack(Stack *ps,void (*pf) (StackEntry))
{
    for(int i=ps->top;i>0;i--)
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	9a 81       	ldd	r25, Y+2	; 0x02
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	9a 81       	ldd	r25, Y+2	; 0x02
    2b22:	18 16       	cp	r1, r24
    2b24:	19 06       	cpc	r1, r25
    2b26:	04 f3       	brlt	.-64     	; 0x2ae8 <TraverseStack+0x24>
    {
        (*pf)(ps->entry[i-1]);
    }
}
    2b28:	26 96       	adiw	r28, 0x06	; 6
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <CreateStack_op>:





void CreateStack_op(Stack_op *op){
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <CreateStack_op+0x6>
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	89 83       	std	Y+1, r24	; 0x01
	  op->top=0;
    2b48:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4c:	11 82       	std	Z+1, r1	; 0x01
    2b4e:	10 82       	st	Z, r1
}
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <Push_op>:
void Push_op(u8 e , Stack_op *ps){
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <Push_op+0x6>
    2b60:	0f 92       	push	r0
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	7b 83       	std	Y+3, r23	; 0x03
    2b6a:	6a 83       	std	Y+2, r22	; 0x02
	 ps->entry[ps->top]=e;
    2b6c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b70:	20 81       	ld	r18, Z
    2b72:	31 81       	ldd	r19, Z+1	; 0x01
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	9b 81       	ldd	r25, Y+3	; 0x03
    2b78:	82 0f       	add	r24, r18
    2b7a:	93 1f       	adc	r25, r19
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	32 96       	adiw	r30, 0x02	; 2
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	80 83       	st	Z, r24
	    ps->top++;
    2b84:	ea 81       	ldd	r30, Y+2	; 0x02
    2b86:	fb 81       	ldd	r31, Y+3	; 0x03
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	01 96       	adiw	r24, 0x01	; 1
    2b8e:	ea 81       	ldd	r30, Y+2	; 0x02
    2b90:	fb 81       	ldd	r31, Y+3	; 0x03
    2b92:	91 83       	std	Z+1, r25	; 0x01
    2b94:	80 83       	st	Z, r24
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	08 95       	ret

00002ba2 <Pop_op>:
void Pop_op(u8 *pe , Stack_op *ps){
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	00 d0       	rcall	.+0      	; 0x2ba8 <Pop_op+0x6>
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <Pop_op+0x8>
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01
    2bb2:	7c 83       	std	Y+4, r23	; 0x04
    2bb4:	6b 83       	std	Y+3, r22	; 0x03
	  *pe=ps->entry[--ps->top];
    2bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	80 83       	st	Z, r24
    2bc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bca:	fc 81       	ldd	r31, Y+4	; 0x04
    2bcc:	20 81       	ld	r18, Z
    2bce:	31 81       	ldd	r19, Z+1	; 0x01
    2bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd4:	82 0f       	add	r24, r18
    2bd6:	93 1f       	adc	r25, r19
    2bd8:	fc 01       	movw	r30, r24
    2bda:	32 96       	adiw	r30, 0x02	; 2
    2bdc:	80 81       	ld	r24, Z
    2bde:	e9 81       	ldd	r30, Y+1	; 0x01
    2be0:	fa 81       	ldd	r31, Y+2	; 0x02
    2be2:	80 83       	st	Z, r24
}
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <StackTop_op>:
void StackTop_op(u8 *pe,Stack_op *ps){
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <StackTop_op+0x6>
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <StackTop_op+0x8>
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	9a 83       	std	Y+2, r25	; 0x02
    2c00:	89 83       	std	Y+1, r24	; 0x01
    2c02:	7c 83       	std	Y+4, r23	; 0x04
    2c04:	6b 83       	std	Y+3, r22	; 0x03
	*pe=ps->entry[ps->top -1];
    2c06:	eb 81       	ldd	r30, Y+3	; 0x03
    2c08:	fc 81       	ldd	r31, Y+4	; 0x04
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	9c 01       	movw	r18, r24
    2c10:	21 50       	subi	r18, 0x01	; 1
    2c12:	30 40       	sbci	r19, 0x00	; 0
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	82 0f       	add	r24, r18
    2c1a:	93 1f       	adc	r25, r19
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	32 96       	adiw	r30, 0x02	; 2
    2c20:	80 81       	ld	r24, Z
    2c22:	e9 81       	ldd	r30, Y+1	; 0x01
    2c24:	fa 81       	ldd	r31, Y+2	; 0x02
    2c26:	80 83       	st	Z, r24
}
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <StackEmpty_op>:
int StackEmpty_op(Stack_op *ps){
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <StackEmpty_op+0x6>
    2c3c:	00 d0       	rcall	.+0      	; 0x2c3e <StackEmpty_op+0x8>
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	9a 83       	std	Y+2, r25	; 0x02
    2c44:	89 83       	std	Y+1, r24	; 0x01
	 return !ps->top;
    2c46:	e9 81       	ldd	r30, Y+1	; 0x01
    2c48:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4a:	80 81       	ld	r24, Z
    2c4c:	91 81       	ldd	r25, Z+1	; 0x01
    2c4e:	1c 82       	std	Y+4, r1	; 0x04
    2c50:	1b 82       	std	Y+3, r1	; 0x03
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	21 f4       	brne	.+8      	; 0x2c5e <StackEmpty_op+0x28>
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	08 95       	ret

00002c70 <ClearStack_op>:
void ClearStack_op(Stack_op *ps){
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <ClearStack_op+0x6>
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	9a 83       	std	Y+2, r25	; 0x02
    2c7c:	89 83       	std	Y+1, r24	; 0x01
	 ps->top=0;
    2c7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c80:	fa 81       	ldd	r31, Y+2	; 0x02
    2c82:	11 82       	std	Z+1, r1	; 0x01
    2c84:	10 82       	st	Z, r1
}
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <main>:
}
*/


 int main (void)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
		 Calc_Init();
    2c98:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Calc_Init>


		while(1)
		{
			Calulator_prog();
    2c9c:	0e 94 35 08 	call	0x106a	; 0x106a <Calulator_prog>
    2ca0:	fd cf       	rjmp	.-6      	; 0x2c9c <main+0xc>

00002ca2 <__mulsi3>:
    2ca2:	62 9f       	mul	r22, r18
    2ca4:	d0 01       	movw	r26, r0
    2ca6:	73 9f       	mul	r23, r19
    2ca8:	f0 01       	movw	r30, r0
    2caa:	82 9f       	mul	r24, r18
    2cac:	e0 0d       	add	r30, r0
    2cae:	f1 1d       	adc	r31, r1
    2cb0:	64 9f       	mul	r22, r20
    2cb2:	e0 0d       	add	r30, r0
    2cb4:	f1 1d       	adc	r31, r1
    2cb6:	92 9f       	mul	r25, r18
    2cb8:	f0 0d       	add	r31, r0
    2cba:	83 9f       	mul	r24, r19
    2cbc:	f0 0d       	add	r31, r0
    2cbe:	74 9f       	mul	r23, r20
    2cc0:	f0 0d       	add	r31, r0
    2cc2:	65 9f       	mul	r22, r21
    2cc4:	f0 0d       	add	r31, r0
    2cc6:	99 27       	eor	r25, r25
    2cc8:	72 9f       	mul	r23, r18
    2cca:	b0 0d       	add	r27, r0
    2ccc:	e1 1d       	adc	r30, r1
    2cce:	f9 1f       	adc	r31, r25
    2cd0:	63 9f       	mul	r22, r19
    2cd2:	b0 0d       	add	r27, r0
    2cd4:	e1 1d       	adc	r30, r1
    2cd6:	f9 1f       	adc	r31, r25
    2cd8:	bd 01       	movw	r22, r26
    2cda:	cf 01       	movw	r24, r30
    2cdc:	11 24       	eor	r1, r1
    2cde:	08 95       	ret

00002ce0 <__divmodsi4>:
    2ce0:	97 fb       	bst	r25, 7
    2ce2:	09 2e       	mov	r0, r25
    2ce4:	05 26       	eor	r0, r21
    2ce6:	0e d0       	rcall	.+28     	; 0x2d04 <__divmodsi4_neg1>
    2ce8:	57 fd       	sbrc	r21, 7
    2cea:	04 d0       	rcall	.+8      	; 0x2cf4 <__divmodsi4_neg2>
    2cec:	14 d0       	rcall	.+40     	; 0x2d16 <__udivmodsi4>
    2cee:	0a d0       	rcall	.+20     	; 0x2d04 <__divmodsi4_neg1>
    2cf0:	00 1c       	adc	r0, r0
    2cf2:	38 f4       	brcc	.+14     	; 0x2d02 <__divmodsi4_exit>

00002cf4 <__divmodsi4_neg2>:
    2cf4:	50 95       	com	r21
    2cf6:	40 95       	com	r20
    2cf8:	30 95       	com	r19
    2cfa:	21 95       	neg	r18
    2cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfe:	4f 4f       	sbci	r20, 0xFF	; 255
    2d00:	5f 4f       	sbci	r21, 0xFF	; 255

00002d02 <__divmodsi4_exit>:
    2d02:	08 95       	ret

00002d04 <__divmodsi4_neg1>:
    2d04:	f6 f7       	brtc	.-4      	; 0x2d02 <__divmodsi4_exit>
    2d06:	90 95       	com	r25
    2d08:	80 95       	com	r24
    2d0a:	70 95       	com	r23
    2d0c:	61 95       	neg	r22
    2d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d10:	8f 4f       	sbci	r24, 0xFF	; 255
    2d12:	9f 4f       	sbci	r25, 0xFF	; 255
    2d14:	08 95       	ret

00002d16 <__udivmodsi4>:
    2d16:	a1 e2       	ldi	r26, 0x21	; 33
    2d18:	1a 2e       	mov	r1, r26
    2d1a:	aa 1b       	sub	r26, r26
    2d1c:	bb 1b       	sub	r27, r27
    2d1e:	fd 01       	movw	r30, r26
    2d20:	0d c0       	rjmp	.+26     	; 0x2d3c <__udivmodsi4_ep>

00002d22 <__udivmodsi4_loop>:
    2d22:	aa 1f       	adc	r26, r26
    2d24:	bb 1f       	adc	r27, r27
    2d26:	ee 1f       	adc	r30, r30
    2d28:	ff 1f       	adc	r31, r31
    2d2a:	a2 17       	cp	r26, r18
    2d2c:	b3 07       	cpc	r27, r19
    2d2e:	e4 07       	cpc	r30, r20
    2d30:	f5 07       	cpc	r31, r21
    2d32:	20 f0       	brcs	.+8      	; 0x2d3c <__udivmodsi4_ep>
    2d34:	a2 1b       	sub	r26, r18
    2d36:	b3 0b       	sbc	r27, r19
    2d38:	e4 0b       	sbc	r30, r20
    2d3a:	f5 0b       	sbc	r31, r21

00002d3c <__udivmodsi4_ep>:
    2d3c:	66 1f       	adc	r22, r22
    2d3e:	77 1f       	adc	r23, r23
    2d40:	88 1f       	adc	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	1a 94       	dec	r1
    2d46:	69 f7       	brne	.-38     	; 0x2d22 <__udivmodsi4_loop>
    2d48:	60 95       	com	r22
    2d4a:	70 95       	com	r23
    2d4c:	80 95       	com	r24
    2d4e:	90 95       	com	r25
    2d50:	9b 01       	movw	r18, r22
    2d52:	ac 01       	movw	r20, r24
    2d54:	bd 01       	movw	r22, r26
    2d56:	cf 01       	movw	r24, r30
    2d58:	08 95       	ret

00002d5a <__prologue_saves__>:
    2d5a:	2f 92       	push	r2
    2d5c:	3f 92       	push	r3
    2d5e:	4f 92       	push	r4
    2d60:	5f 92       	push	r5
    2d62:	6f 92       	push	r6
    2d64:	7f 92       	push	r7
    2d66:	8f 92       	push	r8
    2d68:	9f 92       	push	r9
    2d6a:	af 92       	push	r10
    2d6c:	bf 92       	push	r11
    2d6e:	cf 92       	push	r12
    2d70:	df 92       	push	r13
    2d72:	ef 92       	push	r14
    2d74:	ff 92       	push	r15
    2d76:	0f 93       	push	r16
    2d78:	1f 93       	push	r17
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	ca 1b       	sub	r28, r26
    2d84:	db 0b       	sbc	r29, r27
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	09 94       	ijmp

00002d92 <__epilogue_restores__>:
    2d92:	2a 88       	ldd	r2, Y+18	; 0x12
    2d94:	39 88       	ldd	r3, Y+17	; 0x11
    2d96:	48 88       	ldd	r4, Y+16	; 0x10
    2d98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2da0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2da2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2da4:	b9 84       	ldd	r11, Y+9	; 0x09
    2da6:	c8 84       	ldd	r12, Y+8	; 0x08
    2da8:	df 80       	ldd	r13, Y+7	; 0x07
    2daa:	ee 80       	ldd	r14, Y+6	; 0x06
    2dac:	fd 80       	ldd	r15, Y+5	; 0x05
    2dae:	0c 81       	ldd	r16, Y+4	; 0x04
    2db0:	1b 81       	ldd	r17, Y+3	; 0x03
    2db2:	aa 81       	ldd	r26, Y+2	; 0x02
    2db4:	b9 81       	ldd	r27, Y+1	; 0x01
    2db6:	ce 0f       	add	r28, r30
    2db8:	d1 1d       	adc	r29, r1
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	ed 01       	movw	r28, r26
    2dc6:	08 95       	ret

00002dc8 <_exit>:
    2dc8:	f8 94       	cli

00002dca <__stop_program>:
    2dca:	ff cf       	rjmp	.-2      	; 0x2dca <__stop_program>
